<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error_AnalysingNoWebPartsFound" xml:space="preserve">
    <value>No web parts were found on page '{0}'</value>
  </data>
  <data name="Error_BasicASPXPageCannotTransform" xml:space="preserve">
    <value>Source page '{0}' is a basic ASPX page ... can't currently transform that one, sorry!</value>
  </data>
  <data name="Error_BlogPageTransformationHasToBeCrossSite" xml:space="preserve">
    <value>Blog pages cannot be transformed in-place, their target site collection must be a different one.</value>
  </data>
  <data name="Error_CallingWebServicesToExtractWebPartsFromPage" xml:space="preserve">
    <value>Error calling Web Services to Extract Web Parts from page '{0}'</value>
  </data>
  <data name="Error_InvalidOrMissingBlogContent" xml:space="preserve">
    <value>Body contents was set to null, this is an invalid and empty blog page: '{0}'</value>
  </data>
  <data name="Error_InvalidOrMissingWikiContent" xml:space="preserve">
    <value>WikiField contents was set to null, this is an invalid and empty wiki page: '{0}'</value>
  </data>
  <data name="Error_InvalidSourceContext" xml:space="preserve">
    <value>Invalid source context for exporting content</value>
  </data>
  <data name="Error_MissiningSharePointInputItem" xml:space="preserve">
    <value>The SharePoint input item is missing</value>
  </data>
  <data name="Error_NoPageLayoutTransformationModel" xml:space="preserve">
    <value>No valid PageLayout transformation model could be retrieved for publishing page layout '{0}' of page '{1}'</value>
  </data>
  <data name="Error_PageLayoutMappingFileSchemaValidation" xml:space="preserve">
    <value>Provided custom pagelayout mapping file is invalid: {0}</value>
  </data>
  <data name="Error_PageNotValidMissingFileRef" xml:space="preserve">
    <value>Page '{0}' is not valid due to missing FileRef or FileLeafRef value</value>
  </data>
  <data name="Error_SourcePageIsModern" xml:space="preserve">
    <value>Source page '{0}' is already a modern page</value>
  </data>
  <data name="Error_SourcePageNotFound" xml:space="preserve">
    <value>Source page '{0}' cannot be null</value>
  </data>
  <data name="Error_WebPartMappingSchemaValidation" xml:space="preserve">
    <value>Provided custom web part mapping file is invalid: {0}</value>
  </data>
  <data name="Error_WebPartXmlNotExported" xml:space="preserve">
    <value>XML definition for web part '{0}' from page '{1}' was not exportable. Exception: {2}.</value>
  </data>
  <data name="Info_CallingWebServicesToExtractWebPartsFromPage" xml:space="preserve">
    <value>Calling Web Services to Extract Web Parts from page '{0}'</value>
  </data>
  <data name="Info_ContentTransformFoundSourceWebParts" xml:space="preserve">
    <value>Source page '{0}' contains web part '{1}' of type '{2}'</value>
  </data>
  <data name="Info_NoWebPartsFound" xml:space="preserve">
    <value>No web parts were found on page '{0}'</value>
  </data>
  <data name="Info_PageAnalysisComplete" xml:space="preserve">
    <value>Page analysis completed for page '{0}'</value>
  </data>
  <data name="Info_PageLayoutMappingBeingUsed" xml:space="preserve">
    <value>Page '{0}' uses '{1}' as page layout, mapping that will be used is {2}</value>
  </data>
  <data name="Info_PageLayoutMappingGeneration" xml:space="preserve">
    <value>Page '{0}' uses '{1}' as page layout, no mapping was provided so auto generating a mapping</value>
  </data>
  <data name="Info_PageLivesOutsideOfALibrary" xml:space="preserve">
    <value>Page '{0}' is loaded from outside a library</value>
  </data>
  <data name="Info_PageValidationChecksComplete" xml:space="preserve">
    <value>Validation checks completed for page '{0}'</value>
  </data>
  <data name="Info_RetreivingExportWebPartXmlWorkaround" xml:space="preserve">
    <value>Retrieving Web Part '{0}' using Workaround from page '{1}'</value>
  </data>
  <data name="Info_TransformationMode" xml:space="preserve">
    <value>Transformation of page '{0}' of type '{1}'</value>
  </data>
  <data name="Warning_TableCouldNotBeNormalized" xml:space="preserve">
    <value>Table could not be normalized and will be taken over as is</value>
  </data>
</root>