<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PnP.Core</name>
    </assembly>
    <members>
        <member name="T:PnP.Core.AuthenticationError">
            <summary>
            Error class for authentication errors
            </summary>
        </member>
        <member name="M:PnP.Core.AuthenticationError.#ctor(PnP.Core.ErrorType,System.Text.Json.JsonElement)">
            <summary>
            Constructs an <see cref="T:PnP.Core.AuthenticationError"/> instance
            </summary>
            <param name="type">Type of the error</param>
            <param name="error">Error content as <see cref="T:System.Text.Json.JsonElement"/></param>
        </member>
        <member name="M:PnP.Core.AuthenticationError.#ctor(PnP.Core.ErrorType,System.String)">
            <summary>
            Constructs an <see cref="T:PnP.Core.AuthenticationError"/> instance
            </summary>
            <param name="type">Type of the error</param>
            <param name="error">Error content as <see cref="T:System.String"/></param>
        </member>
        <member name="P:PnP.Core.AuthenticationError.Code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:PnP.Core.AuthenticationError.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:PnP.Core.AuthenticationError.ErrorCodes">
            <summary>
            List of returned error codes
            </summary>
        </member>
        <member name="P:PnP.Core.AuthenticationError.TimeStamp">
            <summary>
            Time the error happened
            </summary>
        </member>
        <member name="P:PnP.Core.AuthenticationError.TraceId">
            <summary>
            Trace id
            </summary>
        </member>
        <member name="P:PnP.Core.AuthenticationError.CorrelationId">
            <summary>
            Correlation id
            </summary>
        </member>
        <member name="M:PnP.Core.AuthenticationError.ToString">
            <summary>
            Outputs a <see cref="T:PnP.Core.AuthenticationError"/> to a string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:PnP.Core.AuthenticationException">
            <summary>
            Authentication exception
            </summary>
        </member>
        <member name="M:PnP.Core.AuthenticationException.#ctor(PnP.Core.ErrorType,System.String)">
            <summary>
            <see cref="T:PnP.Core.AuthenticationException"/> constructor
            </summary>
            <param name="type">Type of error</param>
            <param name="message">Error message</param>
        </member>
        <member name="M:PnP.Core.AuthenticationException.#ctor(PnP.Core.ErrorType,System.String,System.Exception)">
            <summary>
            <see cref="T:PnP.Core.AuthenticationException"/> constructor
            </summary>
            <param name="type">Type of error</param>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception (if any)</param>
        </member>
        <member name="M:PnP.Core.AuthenticationException.ToString">
            <summary>
            Outputs a <see cref="T:PnP.Core.AuthenticationException"/> to a string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:PnP.Core.BaseError">
            <summary>
            Base error information
            </summary>
        </member>
        <member name="P:PnP.Core.BaseError.Type">
            <summary>
            <see cref="T:PnP.Core.ErrorType"/> of the error
            </summary>
        </member>
        <member name="P:PnP.Core.BaseError.PnPCorrelationId">
            <summary>
            Correlation for a PnP Core SDK operation
            </summary>
        </member>
        <member name="P:PnP.Core.BaseError.AdditionalData">
            <summary>
            Additional data linked to an error
            </summary>
        </member>
        <member name="T:PnP.Core.ClientError">
            <summary>
            Information about the client error
            </summary>
        </member>
        <member name="P:PnP.Core.ClientError.Message">
            <summary>
            Error message that was linked to the client error
            </summary>
        </member>
        <member name="T:PnP.Core.ClientException">
            <summary>
            PnP Client exception
            </summary>
        </member>
        <member name="M:PnP.Core.ClientException.ToString">
            <summary>
            Outputs a <see cref="T:PnP.Core.ClientException"/> to a string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:PnP.Core.CsomError">
            <summary>
            Csom service error
            </summary>
        </member>
        <member name="M:PnP.Core.CsomError.#ctor(PnP.Core.ErrorType,System.Int32,System.Text.Json.JsonElement)">
            <summary>
            Default constructor for the <see cref="T:PnP.Core.SharePointRestError"/> error
            </summary>
            <param name="type"><see cref="T:PnP.Core.ErrorType"/> type of the error</param>
            <param name="httpResponseCode">Http response code of the service request that failed</param>
            <param name="errorJson">Json containing the error information</param>
        </member>
        <member name="P:PnP.Core.CsomError.ServerErrorCode">
            <summary>
            SharePoint server error code
            </summary>
        </member>
        <member name="M:PnP.Core.CsomError.ToString">
            <summary>
            Outputs a <see cref="T:PnP.Core.CsomError"/> to a string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:PnP.Core.CsomServiceException">
            <summary>
            CSOM Service exception
            </summary>
        </member>
        <member name="M:PnP.Core.CsomServiceException.ToString">
            <summary>
            Outputs a <see cref="T:PnP.Core.CsomServiceException"/> to a string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:PnP.Core.ErrorType">
            <summary>
            List of possible errors that can be thrown 
            </summary>
        </member>
        <member name="T:PnP.Core.MicrosoftGraphError">
            <summary>
            Microsoft Graph service error
            </summary>
        </member>
        <member name="M:PnP.Core.MicrosoftGraphError.#ctor(PnP.Core.ErrorType,System.Int32,System.Text.Json.JsonElement)">
            <summary>
            Default constructor for the <see cref="T:PnP.Core.MicrosoftGraphError"/> error
            </summary>
            <param name="type"><see cref="T:PnP.Core.ErrorType"/> type of the error</param>
            <param name="httpResponseCode">Http response code of the service request that failed</param>
            <param name="error"><see cref="T:System.Text.Json.JsonElement"/> holding the json data of the service error</param>
        </member>
        <member name="M:PnP.Core.MicrosoftGraphError.#ctor(PnP.Core.ErrorType,System.Int32,System.String)">
            <summary>
            Default constructor for the <see cref="T:PnP.Core.MicrosoftGraphError"/> error
            </summary>
            <param name="type"><see cref="T:PnP.Core.ErrorType"/> type of the error</param>
            <param name="httpResponseCode">Http response code of the service request that failed</param>
            <param name="response">String holding the information about the failed request</param>
        </member>
        <member name="M:PnP.Core.MicrosoftGraphError.ToString">
            <summary>
            Outputs a <see cref="T:PnP.Core.MicrosoftGraphError"/> to a string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:PnP.Core.MicrosoftGraphServiceException">
            <summary>
            Microsoft Graph Service exception
            </summary>
        </member>
        <member name="M:PnP.Core.MicrosoftGraphServiceException.ToString">
            <summary>
            Outputs a <see cref="T:PnP.Core.MicrosoftGraphServiceException"/> to a string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:PnP.Core.PnPException">
            <summary>
            Base class for the pnp core sdk exceptions
            </summary>
        </member>
        <member name="P:PnP.Core.PnPException.Error">
            <summary>
            Additional error information
            </summary>
        </member>
        <member name="T:PnP.Core.ServiceError">
            <summary>
            Error information for a service error
            </summary>
        </member>
        <member name="P:PnP.Core.ServiceError.HttpResponseCode">
            <summary>
            Http response code that was linked to the service error
            </summary>
        </member>
        <member name="P:PnP.Core.ServiceError.Message">
            <summary>
            Error message that was linked to the service error
            </summary>
        </member>
        <member name="P:PnP.Core.ServiceError.ClientRequestId">
            <summary>
            Client request id header returned in the response.
            </summary>
        </member>
        <member name="P:PnP.Core.ServiceError.Code">
            <summary>
            Graph error code
            </summary>
        </member>
        <member name="T:PnP.Core.ServiceException">
            <summary>
            Abstract class representing service errors
            </summary>
        </member>
        <member name="T:PnP.Core.SharePointRestError">
            <summary>
            SharePoint Rest service error
            </summary>
        </member>
        <member name="M:PnP.Core.SharePointRestError.#ctor(PnP.Core.ErrorType,System.Int32,System.String)">
            <summary>
            Default constructor for the <see cref="T:PnP.Core.SharePointRestError"/> error
            </summary>
            <param name="type"><see cref="T:PnP.Core.ErrorType"/> type of the error</param>
            <param name="httpResponseCode">Http response code of the service request that failed</param>
        </member>
        <member name="P:PnP.Core.SharePointRestError.ServerErrorCode">
            <summary>
            SharePoint server error code
            </summary>
        </member>
        <member name="M:PnP.Core.SharePointRestError.ToString">
            <summary>
            Outputs a <see cref="T:PnP.Core.SharePointRestError"/> to a string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:PnP.Core.SharePointRestServiceException">
            <summary>
            Microsoft Graph Service exception
            </summary>
        </member>
        <member name="M:PnP.Core.SharePointRestServiceException.ToString">
            <summary>
            Outputs a <see cref="T:PnP.Core.SharePointRestServiceException"/> to a string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:PnP.Core.Model.AzureActiveDirectory.GroupVisibility">
            <summary>
            Group visibility
            </summary>
        </member>
        <member name="T:PnP.Core.Model.AzureActiveDirectory.IGroup">
            <summary>
            A Microsoft 365 Group
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.Id">
            <summary>
            Id of the Microsoft 365 Group
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.DisplayName">
            <summary>
            Name of the Microsoft 365 Group
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.Description">
            <summary>
            Description of the Microsoft 365 Group
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.WebUrl">
            <summary>
            Url of the SharePoint site connected to this Microsoft 365 group
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.MailEnabled">
            <summary>
            Is this group mail enabled
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.Mail">
            <summary>
            Email address of this Microsoft 365 group
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.MailNickname">
            <summary>
            Mail nickname of this Microsoft 365 group
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.Classification">
            <summary>
            Classification of this group
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.CreatedDateTime">
            <summary>
            When was this group created
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IGroup.Visibility">
            <summary>
            Visibility of this group
            </summary>
        </member>
        <member name="T:PnP.Core.Model.AzureActiveDirectory.IIdentity">
            <summary>
            The Identity resource represents an identity of an actor. For example, an actor can be a user, device, or application.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IIdentity.Id">
            <summary>
            Unique identifier for the identity.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IIdentity.DisplayName">
            <summary>
            The identity's display name. Note that this may not always be available or up to date. 
            For example, if a user changes their display name, the API may show the new value in a future response, 
            but the items associated with the user won't show up as having changed when using delta.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IIdentity.TenantId">
            <summary>
            Unique identity of the tenant (optional).
            </summary>
        </member>
        <member name="P:PnP.Core.Model.AzureActiveDirectory.IIdentity.UserIdentityType">
            <summary>
            In case the identity is a user this property contains the user type of the user
            </summary>
        </member>
        <member name="T:PnP.Core.Model.AzureActiveDirectory.IUser">
            <summary>
            Public interface to define a User of Azure Active Directory
            </summary>
        </member>
        <member name="T:PnP.Core.Model.AzureActiveDirectory.IUserCollection">
            <summary>
            Public interface to define a collection of Users of Azure Active Directory
            </summary>
        </member>
        <member name="T:PnP.Core.Model.ConcreteTypeAttribute">
            <summary>
            Attribute to declare the concrete type for this interface
            </summary>
        </member>
        <member name="P:PnP.Core.Model.ConcreteTypeAttribute.Type">
            <summary>
            The actual concrete type implementing the interface
            </summary>
        </member>
        <member name="T:PnP.Core.Model.GraphPropertyAttribute">
            <summary>
            Attribute to define how a model property maps to a Microsoft Graph field for usage in Microsoft Graph API calls
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphPropertyAttribute.Get">
            <summary>
            Url to get this field, needed in case the field cannot be loaded via an expand
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphPropertyAttribute.Beta">
            <summary>
            Model property to define that a property can only be handled using the Microsoft Graph beta endpoint
            </summary>
        </member>
        <member name="T:PnP.Core.Model.GraphTypeAttribute">
            <summary>
            Attribute used to decorate model classes that can be loaded via Microsoft Graph
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphTypeAttribute.Id">
            <summary>
            Defines the field that serves as the id field in Graph, typically this is the "id" field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphTypeAttribute.Target">
            <summary>
            The actual target type for which this attribute is valid
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphTypeAttribute.Uri">
            <summary>
            URI that identifies an object in Microsoft Graph, used for get, update and delete requests
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphTypeAttribute.LinqGet">
            <summary>
            Get LINQ query API URI, overrides the global SharePointURI when specified
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphTypeAttribute.Get">
            <summary>
            Get API URI, overrides the global GraphURI when specified
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphTypeAttribute.Update">
            <summary>
            Update API URI, overrides the global GraphURI when specified
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphTypeAttribute.Delete">
            <summary>
            Delete API URI, overrides the global GraphURI when specified
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphTypeAttribute.OverflowProperty">
            <summary>
            Model property name that will hold dynamic data (e.g. List Item property/value pairs)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.GraphTypeAttribute.Beta">
            <summary>
            Model property to define that a model can only be handled using the Microsoft Graph beta endpoint
            </summary>
        </member>
        <member name="T:PnP.Core.Model.KeyPropertyAttribute">
            <summary>
            Indicates that this property is a key property, specifying the keyfield name is required
            </summary>
        </member>
        <member name="T:PnP.Core.Model.PropertyAttribute">
            <summary>
            Base class for attributes that define how a model property maps to the field used in either SharePoint REST or Microsoft Graph
            </summary>
        </member>
        <member name="P:PnP.Core.Model.PropertyAttribute.FieldName">
            <summary>
            Name of the SharePoint field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.PropertyAttribute.Expandable">
            <summary>
            Is this property an expandable property?
            </summary>
        </member>
        <member name="P:PnP.Core.Model.PropertyAttribute.ExpandByDefault">
            <summary>
            Expand this property when there's a default get (a get without specifying the fields to load)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.PropertyAttribute.JsonPath">
            <summary>
            Json path that contains the value we need, relative to the object loaded via FieldName
            This works for simple JSON objects without arrays, delimiter will be a dot e.g. property.subproperty.subsub
            </summary>
        </member>
        <member name="P:PnP.Core.Model.PropertyAttribute.UseCustomMapping">
            <summary>
            Force a call out to the custom mapping handler for this field / the default mapping logic will not be applied
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePointPropertyAttribute">
            <summary>
            Attribute to define how a model property maps to a SharePoint field for usage in SharePoint REST calls
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePointTypeAttribute">
            <summary>
            Attribute used to decorate model classes that can be loaded via SharePoint REST
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePointTypeAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="sharePointType">SharePoint REST type</param>
        </member>
        <member name="P:PnP.Core.Model.SharePointTypeAttribute.Type">
            <summary>
            Defines the OData name of this SharePoint REST type (e.g. SP.Web)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePointTypeAttribute.Target">
            <summary>
            The actual target type for which this attribute is valid
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePointTypeAttribute.Uri">
            <summary>
            URI that identifies an object in SharePoint REST, used for get, update and delete requests
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePointTypeAttribute.LinqGet">
            <summary>
            Get LINQ query API URI, overrides the global SharePointURI when specified
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePointTypeAttribute.Get">
            <summary>
            Get API URI, overrides the global SharePointURI when specified
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePointTypeAttribute.Update">
            <summary>
            Update API URI, overrides the global SharePointURI when specified
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePointTypeAttribute.Delete">
            <summary>
            Delete API URI, overrides the global SharePointURI when specified
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePointTypeAttribute.OverflowProperty">
            <summary>
            Model property name that will hold dynamic data (e.g. List Item property/value pairs)
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SystemPropertyAttribute">
            <summary>
            Indicates that a property is not a model property but a system property
            </summary>
        </member>
        <member name="T:PnP.Core.Model.BaseComplexType`1">
            <summary>
            Base class for all complex types for use complex properties of model classes
            </summary>
            <typeparam name="TModel">Model class</typeparam>
        </member>
        <member name="P:PnP.Core.Model.BaseComplexType`1.MappingHandler">
            <summary>
            Handler that will fire when a property mapping does cannot be done automatically
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseComplexType`1.PostMappingHandler">
            <summary>
            Handler that will fire after the full json to model operation was done
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseComplexType`1.GetClassInfo">
            <summary>
            Translates model into a set of classes that are used to drive CRUD operations
            </summary>
            <param name="modelInstance">Model instance to process</param>
            <returns>Entity model class describing this model instance</returns>
        </member>
        <member name="T:PnP.Core.Model.AddApiCall">
            <summary>
            Delegate for requesting the Api call for doing an ADD operation
            </summary>
            <returns>API call for adding a model entity</returns>
        </member>
        <member name="T:PnP.Core.Model.GetApiCallOverride">
            <summary>
            Delegate for overriding the default API call in case of a GET request
            </summary>
            <param name="input">Generated API call</param>
            <returns>Changed API call</returns>
        </member>
        <member name="T:PnP.Core.Model.UpdateApiCallOverride">
            <summary>
            Delegate for overriding the default API call in case of a UPDATE request
            </summary>
            <param name="input">Generated API call</param>
            <returns>Changed API call</returns>
        </member>
        <member name="T:PnP.Core.Model.DeleteApiCallOverride">
            <summary>
            Delegate for overriding the default API call in case of a DELETE request
            </summary>
            <param name="input">Generated API call</param>
            <returns>Changed API call</returns>
        </member>
        <member name="T:PnP.Core.Model.BaseDataModel`1">
            <summary>
            Base class for all model classes
            </summary>
            <typeparam name="TModel">Model class</typeparam>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.Metadata">
            <summary>
            Dictionary to access the domain model object Metadata
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.PnPContext">
            <summary>
            PnP Context
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.Parent">
            <summary>
            Returns the parent of this model
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.Log">
            <summary>
            Connected logger
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.Requested">
            <summary>
            Indicates whether this model was fetched from the server
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.GetBatchAsync(PnP.Core.Services.Batch,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="batch">Batch add this request to</param>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.GetBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.GetAsync(PnP.Core.Services.ApiResponse,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Special override the load child model classes ==> if apiResponse != default then 
            no get will be done but the system will handle the mapping from json to model
            </summary>
            <param name="apiResponse">Json response (when in recursive mapping of json to model), default otherwise</param>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.AddBatchAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a domain model instance
            </summary>
            <returns>The added domain model</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.AddBatchAsync(PnP.Core.Services.Batch,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a domain model instance
            </summary>
            <param name="batch">Batch add this request to</param>
            <returns>The added domain model</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.AddAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a domain model instance
            </summary>
            <returns>The added domain model</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.UpdateBatchAsync">
            <summary>
            Updates a domain model
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.UpdateBatchAsync(PnP.Core.Services.Batch)">
            <summary>
            Updates a domain model
            </summary>
            <param name="batch">Batch add this request to</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.UpdateAsync">
            <summary>
            Updates a domain model
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.DeleteBatchAsync">
            <summary>
            Deletes a domain model
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.DeleteBatchAsync(PnP.Core.Services.Batch)">
            <summary>
            Deletes a domain model
            </summary>
            <param name="batch">Batch add this request to</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.DeleteAsync">
            <summary>
            Deletes a domain model
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.GetApiCallOverrideHandler">
            <summary>
            API call override handler for get requests
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.MappingHandler">
            <summary>
            Handler that will fire when a property mapping does cannot be done automatically
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.PostMappingHandler">
            <summary>
            Handler that will fire after the full json to model operation was done
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseBatchGetAsync(PnP.Core.Services.Batch,PnP.Core.Services.ApiCall,System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates and adds a Get request to the given batch
            </summary>
            <param name="batch">Batch to add the request to</param>
            <param name="expressions">Expressions needed to create the request</param>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.AddApiCallHandler">
            <summary>
            API call handler for add requests
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseBatchAddAsync(PnP.Core.Services.ApiCall,System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Creates and adds a Post request to the given batch
            </summary>
            <param name="postApiCall">Api call to execute</param>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseBatchAddAsync(PnP.Core.Services.Batch,PnP.Core.Services.ApiCall,System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Creates and adds a Post request to the given batch
            </summary>
            <param name="batch">Batch to add the request to</param>
            <param name="postApiCall">Api call to execute</param>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseAdd(PnP.Core.Services.ApiCall,System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Creates and adds a Post request to the given batch
            </summary>
            <param name="batch">Batch to add the request to</param>
            <param name="postApiCall">Api call to execute</param>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.UpdateApiCallOverrideHandler">
            <summary>
            API call override handler for update requests
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseBatchUpdateAsync(System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Creates and adds an Update request to the given batch
            </summary>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseBatchUpdateAsync(PnP.Core.Services.Batch,System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Creates and adds an Update request to the given batch
            </summary>
            <param name="batch">Batch to add the request to</param>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseUpdate(System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Creates and adds an Update request to the given batch
            </summary>
            <param name="batch">Batch to add the request to</param>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModel`1.DeleteApiCallOverrideHandler">
            <summary>
            API call override handler for delete requests
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseBatchDeleteAsync(System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Creates and adds an Delete request to the given batch
            </summary>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseBatchDeleteAsync(PnP.Core.Services.Batch,System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Creates and adds an Delete request to the given batch
            </summary>
            <param name="batch">Batch to add the request to</param>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.BaseDelete(System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Creates and adds an Delete request to the given batch
            </summary>
            <param name="batch">Batch to add the request to</param>
            <param name="fromJsonCasting">Delegate for type mapping when the request is executed</param>
            <param name="postMappingJson">Delegate for post mapping</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.RequestBatchAsync(PnP.Core.Services.ApiCall,System.Net.Http.HttpMethod)">
            <summary>
            Adds a request to the given batch
            </summary>
            <param name="apiCall">Api call to execute</param>
            <param name="method"><see cref="T:System.Net.Http.HttpMethod"/> to use for this request</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.RequestBatchAsync(PnP.Core.Services.Batch,PnP.Core.Services.ApiCall,System.Net.Http.HttpMethod)">
            <summary>
            Adds a request to the given batch
            </summary>
            <param name="batch">Batch to add the request to</param>
            <param name="apiCall">Api call to execute</param>
            <param name="method"><see cref="T:System.Net.Http.HttpMethod"/> to use for this request</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.RequestAsync(PnP.Core.Services.ApiCall,System.Net.Http.HttpMethod)">
            <summary>
            Executes a given request
            </summary>
            <param name="apiCall">Api call to execute</param>
            <param name="method"><see cref="T:System.Net.Http.HttpMethod"/> to use for this request</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.RawRequestBatchAsync(PnP.Core.Services.ApiCall,System.Net.Http.HttpMethod)">
            <summary>
            Adds a request to the given batch
            </summary>
            <param name="apiCall">Api call to execute</param>
            <param name="method"><see cref="T:System.Net.Http.HttpMethod"/> to use for this request</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.RawRequestBatchAsync(PnP.Core.Services.Batch,PnP.Core.Services.ApiCall,System.Net.Http.HttpMethod)">
            <summary>
            Adds a request to the given batch
            </summary>
            <param name="batch">Batch to add the request to</param>
            <param name="apiCall">Api call to execute</param>
            <param name="method"><see cref="T:System.Net.Http.HttpMethod"/> to use for this request</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.RawRequestAsync(PnP.Core.Services.ApiCall,System.Net.Http.HttpMethod)">
            <summary>
            Executes a given request, not loading the response json in the model but simply returning it
            </summary>
            <param name="apiCall">Api call to execute</param>
            <param name="method"><see cref="T:System.Net.Http.HttpMethod"/> to use for this request</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModel`1.GetClassInfo(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Translates model into a set of classes that are used to drive CRUD operations, this takes into account the passed expressions
            </summary>
            <param name="expressions">Data load expressions</param>
            <returns>Entity model class describing this model instance</returns>
        </member>
        <member name="T:PnP.Core.Model.BaseDataModelCollection`1">
            <summary>
            Base abstract class for every Domain Model objects collection
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModelCollection`1.Metadata">
            <summary>
            Dictionary to access the domain model object Metadata
            </summary>
        </member>
        <member name="F:PnP.Core.Model.BaseDataModelCollection`1.items">
            <summary>
            List of items in the collection
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModelCollection`1.PnPContext">
            <summary>
            Each item and each collection requires a PnPContext
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModelCollection`1.Parent">
            <summary>
            Parent of this collection
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModelCollection`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModelCollection`1.Requested">
            <summary>
            Was this collectioned loaded with data from a server request
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModelCollection`1.Length">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:PnP.Core.Model.BaseDataModelCollection`1.RequestedItems">
            <summary>
            Items in the collection
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.Add(`0)">
            <summary>
            Standard add method to add a model to the collection
            </summary>
            <param name="model">Model to add</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator, will also purge deleted items
            </summary>
            <returns>Enumerator for this collection</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator, will also purge deleted items
            </summary>
            <returns>Enumerator for this collection</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.Remove(`0)">
            <summary>
            Removes a model from the collection, will be called for example by the logic that consolidates batch requests
            </summary>
            <param name="item">Model to remove</param>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.PurgeDeletedItems">
            <summary>
            Purges the items marked as deleted
            </summary>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.CreateNew">
            <summary>
            Creates a new instance of the model handled by this collection. The instance will not be added to the collection
            </summary>
            <returns>Model entity</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.CreateNewAndAdd">
            <summary>
            Creates a new instance of the model handled by this collection and adds it to the collection. This 
            add will not mark the collection as requested
            </summary>
            <returns>Model entity</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.PnP#Core#Model#IManageableCollection#CreateNew">
            <summary>
            Parameter less new, needs to be overriden by the collections using this base class
            </summary>
            <returns>Model entity</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.PnP#Core#Model#IManageableCollection#CreateNewAndAdd">
            <summary>
            Creates a new instance of the model handled by this collection and adds it to the collection. This 
            add will not mark the collection as requested
            </summary>
            <returns>Model entity</returns>
        </member>
        <member name="M:PnP.Core.Model.BaseDataModelCollection`1.Remove(System.Object)">
            <summary>
            Removes a model from the collection, will be called for example by the logic that consolidates batch requests
            </summary>
            <param name="item">Model to remove</param>
        </member>
        <member name="T:PnP.Core.Model.DataModelExtensions">
            <summary>
            Data model extension methods for public use
            </summary>
        </member>
        <member name="M:PnP.Core.Model.DataModelExtensions.EnsurePropertiesAsync``1(PnP.Core.Model.IDataModel{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Checks if the requested properties are loaded for the given model, if not they're loaded via a GetAsync call
            </summary>
            <typeparam name="TModel">Model type (e.g. IWeb)</typeparam>
            <param name="model">Implementation of the model (e.g. Web)</param>
            <param name="expressions">Expressions listing the properties to load</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.DataModelExtensions.ArePropertiesAvailable``1(PnP.Core.Model.IDataModel{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Checks if the needed properties were loaded or not
            </summary>
            <typeparam name="TModel">Model type (e.g. IWeb)</typeparam>
            <param name="model">Implementation of the model (e.g. Web)</param>
            <param name="expression">Expression listing the properties to check</param>
            <returns>True if properties were loaded, false otherwise</returns>
        </member>
        <member name="M:PnP.Core.Model.DataModelExtensions.IsPropertyAvailable``1(PnP.Core.Model.IDataModel{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks if a property is loaded or not
            </summary>
            <typeparam name="TModel">Model type (e.g. IWeb)</typeparam>
            <param name="model">Implementation of the model (e.g. Web)</param>
            <param name="expression">Expression listing the property to load</param>
            <returns>True if property was loaded, false otherwise</returns>
        </member>
        <member name="M:PnP.Core.Model.DataModelExtensions.IsPropertyAvailable``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks if a property is loaded or not on a complex type
            </summary>
            <typeparam name="TModel">Model type (e.g. ITeamFunSettings)</typeparam>
            <param name="model">Implementation of the model (e.g. TeamFunSettings)</param>
            <param name="expression">Expression listing the property to load</param>
            <returns>True if property was loaded, false otherwise</returns>
        </member>
        <member name="M:PnP.Core.Model.DataModelExtensions.EnsureParentObjectAsync(PnP.Core.Model.IDataModelParent)">
            <summary>
            Ensures the basic properties (mainly IDs) of the parent of the current domain model object
            </summary>
            <param name="model">The domain model to which we have to ensure the parent</param>
        </member>
        <member name="M:PnP.Core.Model.DataModelExtensions.SetSystemProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``1)">
            <summary>
            Sets a property value without marking it as "changed"
            </summary>
            <typeparam name="TModel">Model type (e.g. ITeamFunSettings)</typeparam>
            <param name="model">Implementation of the model (e.g. TeamFunSettings)</param>
            <param name="expression">Expression listing the property to load</param>
            <param name="value">Value to set</param>
            <returns>True if property was loaded, false otherwise</returns>
        </member>
        <member name="M:PnP.Core.Model.DataModelExtensions.Include``1(PnP.Core.Model.IDataModelCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Enables using the .Include lambda expression syntax on a collection
            </summary>
            <typeparam name="TModel">Collection model</typeparam>
            <param name="collection">Collection to apply the .Include on </param>
            <param name="expressions">Expression</param>
            <returns>Null...return value is not needed</returns>
        </member>
        <member name="T:PnP.Core.Model.EntityFieldExpandInfo">
            <summary>
            Holds information that describes how a fields is expanded. Is populated when .Include() is used 
            </summary>
        </member>
        <member name="T:PnP.Core.Model.EntityFieldInfo">
            <summary>
            Describes a field in our metadata model
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.Name">
            <summary>
            Field name in the model
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.DataType">
            <summary>
            Datatype in the model
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.PropertyInfo">
            <summary>
            Property info for this field in a model ==> will be used by the json to model mapping
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.IsSharePointKey">
            <summary>
            Is this a key field for SharePoint - used to prevent duplicate loading in collections
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.IsGraphKey">
            <summary>
            Is this a key field for SharePoint - used to prevent duplicate loading in collections
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.Load">
            <summary>
            Does this field need to be loaded
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.SharePointExpandable">
            <summary>
            Is this an expandable field for REST
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.GraphExpandable">
            <summary>
            Is this an expandable field for Graph
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.ExpandableByDefault">
            <summary>
            Expand this property when there's a default get (a get without specifying the fields to load)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.SharePointName">
            <summary>
            Name of this field when using SharePoint REST queries
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.GraphName">
            <summary>
            Name of this field when using Microsoft Graph queries
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.SharePointJsonPath">
            <summary>
            Json path that contains the value we need, relative to the object loaded via FieldName
            This works for simple JSON objects without arrays, delimiter will be a dot e.g. property.subproperty.subsub
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.GraphJsonPath">
            <summary>
            Json path that contains the value we need, relative to the object loaded via FieldName
            This works for simple JSON objects without arrays, delimiter will be a dot e.g. property.subproperty.subsub
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.GraphGet">
            <summary>
            Query to get a specific field, needed when a simple expand does not work
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.GraphBeta">
            <summary>
            Specifies if this property requires the Graph beta endpoint
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.SharePointUseCustomMapping">
            <summary>
            Force a call out to the custom mapping handler for this field / the default mapping logic will not be applied
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.GraphUseCustomMapping">
            <summary>
            Force a call out to the custom mapping handler for this field / the default mapping logic will not be applied
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityFieldInfo.ExpandFieldInfo">
            <summary>
            Scope the expand to a set of fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityGraphTypeInfo.Target">
            <summary>
            The actual target type for which this attribute is valid
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityGraphTypeInfo.Id">
            <summary>
            Value of the id field used to load graph relationships (e.g. load lists from a given site)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityGraphTypeInfo.Beta">
            <summary>
            Specifies if this class requires the Microsoft Graph beta endpoint
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityGraphTypeInfo.Get">
            <summary>
            API call for a Graph get
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityGraphTypeInfo.LinqGet">
            <summary>
            API call for a Graph LINQ get
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityGraphTypeInfo.OverflowProperty">
            <summary>
            Indicates the property used for the overflow field when a Graph query is used
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityGraphTypeInfo.Update">
            <summary>
            API call for a Graph update
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityGraphTypeInfo.Delete">
            <summary>
            API call for a Graph delete
            </summary>
        </member>
        <member name="T:PnP.Core.Model.EntityInfo">
            <summary>
            Class describing the underlying data store, used to map data store to model. This class contains the dynamic and the static part
            </summary>
        </member>
        <member name="M:PnP.Core.Model.EntityInfo.#ctor">
            <summary>
            Default constructor        
            </summary>
        </member>
        <member name="M:PnP.Core.Model.EntityInfo.#ctor(PnP.Core.Model.EntityInfo)">
            <summary>
            Parameterized constructor        
            </summary>
            <param name="entityInfo">An instance of EntityInfo to construct the new EntityInfo from</param>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.Fields">
            <summary>
            Field mapping information
            </summary>
        </member>
        <member name="F:PnP.Core.Model.EntityInfo.ActualKeyFieldName">
            <summary>
            Name of the actual key field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointType">
            <summary>
            Data store type when using REST
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointTarget">
            <summary>
            The actual target type for which this attribute is valid
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphTarget">
            <summary>
            The actual target type for which this attribute is valid
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointUri">
            <summary>
            Uri that uniquely identifies this item via REST
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphId">
            <summary>
            Value of the id field used to load graph relationships (e.g. load lists from a given site)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphBeta">
            <summary>
            Specifies if this class requires the Microsoft Graph beta endpoint
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphGet">
            <summary>
            API call for a Graph get
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointGet">
            <summary>
            API call for a REST get
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphLinqGet">
            <summary>
            API call for a Graph LINQ get
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointLinqGet">
            <summary>
            API call for a REST LINQ get
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.UseOverflowField">
            <summary>
            Indicates if this class must be handled as a generic dictionary by populating data in the provided field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointOverflowProperty">
            <summary>
            Indicates the property used for the overflow field when a REST query is used
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphOverflowProperty">
            <summary>
            Indicates the property used for the overflow field when a Graph query is used
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphUpdate">
            <summary>
            API call for a Graph update
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointUpdate">
            <summary>
            API call for a REST update
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphDelete">
            <summary>
            API call for a Graph delete
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointDelete">
            <summary>
            API call for a REST delete
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.Target">
            <summary>
            Target type for which the SharePoint or Graph entity type information is needed
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointKeyField">
            <summary>
            Gets the first field marked as IsKey
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphKeyField">
            <summary>
            Gets the first field marked as IsKey
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphNonExpandableCollections">
            <summary>
            Returns a list of fields in this entity which do require a separate query (they can't be expanded)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.SharePointFieldsLoadedViaExpression">
            <summary>
            Was there an expression provided to build up the fields lists of this entity
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.GraphFieldsLoadedViaExpression">
            <summary>
            Was there an expression provided to build up the fields lists of this entity
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityInfo.CanUseGraphGet">
            <summary>
            Check if Microsoft Graph can be used based upon the requested fields to load
            </summary>
        </member>
        <member name="T:PnP.Core.Model.EntityManager">
            <summary>
            Singleton class that serves as a simple caching of entity information
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntityManager.Instance">
            <summary>
            Provides the singleton instance of th entity manager
            </summary>
        </member>
        <member name="M:PnP.Core.Model.EntityManager.#ctor">
            <summary>
            Private constructor since this is a singleton
            </summary>
        </member>
        <member name="M:PnP.Core.Model.EntityManager.GetStaticClassInfo(System.Type)">
            <summary>
            Translates model type into a set of classes that are used to drive CRUD operations
            </summary>
            <param name="type">The reference model type</param>
            <returns>Entity model class describing this model instance</returns>
        </member>
        <member name="M:PnP.Core.Model.EntityManager.GetEntityConcreteInstance``1(System.Type,PnP.Core.Model.IDataModelParent)">
            <summary>
            Creates a concrete instance of a domain model type based on the reference type
            </summary>
            <param name="type">The reference model type, can be an interface or a class</param>
            <param name="parent">Parent of the domain model object, optional</param>
            <returns>Entity model class describing this model instance</returns>
        </member>
        <member name="M:PnP.Core.Model.EntityManager.GetEntityConcreteInstance(System.Type)">
            <summary>
            Creates a concrete instance of a domain model type based on the reference type
            </summary>
            <param name="type">The reference model type, can be an interface or a class</param>
            <returns>Entity model class describing this model instance</returns>
        </member>
        <member name="M:PnP.Core.Model.EntityManager.GetClassInfo``1(System.Type,PnP.Core.Model.BaseDataModel{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Translates model into a set of classes that are used to drive CRUD operations, this takes into account the passed expressions
            </summary>
            <param name="modelType">The Type of the model object to process</param>
            <param name="expressions">Data load expressions</param>
            <returns>Entity model class describing this model instance</returns>
        </member>
        <member name="P:PnP.Core.Model.EntitySharePointTypeInfo.Type">
            <summary>
            Data store type when using REST
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntitySharePointTypeInfo.Target">
            <summary>
            The actual target type for which this attribute is valid
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntitySharePointTypeInfo.Uri">
            <summary>
            Uri that uniquely identifies this item via REST
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntitySharePointTypeInfo.Get">
            <summary>
            API call for a REST get
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntitySharePointTypeInfo.LinqGet">
            <summary>
            API call for a REST LINQ get
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntitySharePointTypeInfo.OverflowProperty">
            <summary>
            Indicates the property used for the overflow field when a REST query is used
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntitySharePointTypeInfo.Update">
            <summary>
            API call for a REST update
            </summary>
        </member>
        <member name="P:PnP.Core.Model.EntitySharePointTypeInfo.Delete">
            <summary>
            API call for a REST delete
            </summary>
        </member>
        <member name="T:PnP.Core.Model.ExpandoBaseDataModel`1">
            <summary>
            Internal type to represent an object that is a BaseDataModel<typeparamref name="TModel"/>
            and that also includes a set of dynamic properties, which can be accessed
            as named and typed properties, or which can be accessed through an indexer
            </summary>
            <remarks>
            Solution refactored starting from this document: 
            https://weblog.west-wind.com/posts/2012/feb/08/creating-a-dynamic-extensible-c-expando-object
            </remarks>
            <typeparam name="TModel">The actual type of the entity of the Domain Model</typeparam>
        </member>
        <member name="F:PnP.Core.Model.ExpandoBaseDataModel`1.instanceType">
            <summary>
            Type of the instance object
            </summary>
        </member>
        <member name="F:PnP.Core.Model.ExpandoBaseDataModel`1.instanceProperties">
            <summary>
            Cached array of properties for the current type
            </summary>
        </member>
        <member name="F:PnP.Core.Model.ExpandoBaseDataModel`1.valuesInstantiated">
            <summary>
            Private field to keep track of the Values TransientDictionary creation
            </summary>
        </member>
        <member name="P:PnP.Core.Model.ExpandoBaseDataModel`1.OverflowFieldName">
            <summary>
            Returns the overflow field name
            </summary>
        </member>
        <member name="P:PnP.Core.Model.ExpandoBaseDataModel`1.Values">
            <summary>
            String Dictionary that contains the custom properties with their dynamic values
            </summary>        
        </member>
        <member name="M:PnP.Core.Model.ExpandoBaseDataModel`1.#ctor">
            <summary>
            Creates an instance of the Expando object based on the
            actual inheriting type
            </summary>
        </member>
        <member name="M:PnP.Core.Model.ExpandoBaseDataModel`1.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Try to retrieve a member by name
            </summary>
            <remarks>First try looking for a dynamic property, otherwise fall-back to typed properties</remarks>
            <param name="binder">The requested property</param>
            <param name="result">The value of the requested property, if any</param>
            <returns>Boolean indicating whether the member value was retrieved, or not</returns>
        </member>
        <member name="M:PnP.Core.Model.ExpandoBaseDataModel`1.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Try to set a member by name
            </summary>
            <remarks>First try looking for typed properties, otherwise fall-back to a dynamic property</remarks>
            <param name="binder">The requested property</param>
            <param name="value">The value to set to the member</param>
            <returns>Boolean indicating whether the member set was successful, or not</returns>
        </member>
        <member name="M:PnP.Core.Model.ExpandoBaseDataModel`1.GetProperty(System.String,System.Object@)">
            <summary>
            Reflection helper method to retrieve a property
            </summary>
            <param name="name">The name of the property to retrieve a value for</param>
            <param name="result">The value of the property, if any</param>
            <returns>Defines whether the property was found or not</returns>
        </member>
        <member name="M:PnP.Core.Model.ExpandoBaseDataModel`1.SetProperty(System.String,System.Object)">
            <summary>
            Reflection helper method to set a property value
            </summary>
            <param name="name">The name of the property to set a value to</param>
            <param name="result">The value to set on the property</param>
            <returns>Defines whether the set property value was successful or not</returns>
        </member>
        <member name="P:PnP.Core.Model.ExpandoBaseDataModel`1.Item(System.String)">
            <summary>
            Indexer to access the custom properties of the instance object
            </summary>
            <remarks>
            The getter checks the Properties dictionary first
            then looks in PropertyInfo for properties.
            The setter checks the instance properties before
            checking the Properties dictionary.
            </remarks>
            <param name="key">The key for the property</param>
        </member>
        <member name="M:PnP.Core.Model.ExpandoBaseDataModel`1.GetProperties(System.Boolean)">
            <summary>
            Returns all the object properties, eventually including the instance typed properties
            </summary>
            <param name="includeInstanceProperties">Declares whether to include instance typed properties, by default false</param>
            <returns>The collection of properties for the instance</returns>
        </member>
        <member name="M:PnP.Core.Model.ExpandoBaseDataModel`1.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)">
            <summary>
            Checks whether a property exists in the instance type, either as a custom property or as a typed property, if requested
            </summary>
            <param name="item">The property to look for</param>
            <param name="includeInstanceProperties">Declares whether to include instance typed properties, by default false</param>
            <returns>A boolean defining whether the property exists or not</returns>
        </member>
        <member name="M:PnP.Core.Model.ExpandoBaseDataModel`1.Contains(System.String,System.Boolean)">
            <summary>
            Checks whether a property exists in the instance type, either as a custom property or as a typed property, if requested
            </summary>
            <param name="key">The name of the property to look for</param>
            <param name="includeInstanceProperties">Declares whether to include instance typed properties, by default false</param>
            <returns>A boolean defining whether the property exists or not</returns>
        </member>
        <member name="T:PnP.Core.Model.IDataModel`1">
            <summary>
            Defines the very basic interface for every Domain Model object.
            Add methods are implemented in their respective model interfaces
            </summary>
            <typeparam name="TModel">The actual type of the Domain Model object</typeparam>
        </member>
        <member name="M:PnP.Core.Model.IDataModel`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModel`1.GetBatchAsync(PnP.Core.Services.Batch,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="batch">Batch add this request to</param>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModel`1.GetBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModel`1.HasValue(System.String)">
            <summary>
            Checks if a property on this model object has a value set
            </summary>
            <param name="propertyName">Property to check</param>
            <returns>True if set, false otherwise</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModel`1.HasChanged(System.String)">
            <summary>
            Checks if a property on this model object has changed
            </summary>
            <param name="propertyName">Property to check</param>
            <returns>True if changed, false otherwise</returns>
        </member>
        <member name="P:PnP.Core.Model.IDataModel`1.Requested">
            <summary>
            Was this model requested from the back-end
            </summary>
        </member>
        <member name="T:PnP.Core.Model.IDataModelCollection`1">
            <summary>
            Defines the very basic interface for every collection of Domain Model objects
            </summary>
            <typeparam name="TModel">The actual type of the Domain Model objects</typeparam>
        </member>
        <member name="T:PnP.Core.Model.IDataModelDelete">
            <summary>
            Defines the delete interface for Domain Model objects that need delete.
            </summary>
        </member>
        <member name="M:PnP.Core.Model.IDataModelDelete.DeleteBatchAsync">
            <summary>
            Collects the request to delete a Domain Model object into the remote data source 
            </summary>
        </member>
        <member name="M:PnP.Core.Model.IDataModelDelete.DeleteBatchAsync(PnP.Core.Services.Batch)">
            <summary>
            Collects the request to delete a Domain Model object into the remote data source using a batch
            </summary>
            <param name="batch">Batch add this request to</param>
        </member>
        <member name="M:PnP.Core.Model.IDataModelDelete.DeleteAsync">
            <summary>
            Deletes a Domain Model object into the remote data source 
            </summary>
        </member>
        <member name="T:PnP.Core.Model.IDataModelGet">
            <summary>
            Defines the basic untyped read interface for Domain Model objects that can be read.
            </summary>
        </member>
        <member name="M:PnP.Core.Model.IDataModelGet.GetBatchAsync(PnP.Core.Services.Batch,System.Linq.Expressions.Expression{System.Func{System.Object,System.Object}}[])">
            <summary>
            Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="batch">Batch add this request to</param>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModelGet.GetBatchAsync(System.Linq.Expressions.Expression{System.Func{System.Object,System.Object}}[])">
            <summary>
            Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModelGet.GetAsync(System.Linq.Expressions.Expression{System.Func{System.Object,System.Object}}[])">
            <summary>
            Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModelGet.GetAsync(PnP.Core.Services.ApiResponse,System.Linq.Expressions.Expression{System.Func{System.Object,System.Object}}[])">
            <summary>
            Special override the load child model classes ==> if apiResponse != default then 
            no get will be done but the system will handle the mapping from json to model
            </summary>
            <param name="apiResponse">Json response (when in recursive mapping of json to model), default otherwise</param>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="T:PnP.Core.Model.IDataModelGet`1">
            <summary>
            Defines the read interface for Domain Model objects that can be read.
            </summary>
        </member>
        <member name="M:PnP.Core.Model.IDataModelGet`1.GetBatchAsync(PnP.Core.Services.Batch,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="batch">Batch add this request to</param>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModelGet`1.GetBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModelGet`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties
            </summary>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="M:PnP.Core.Model.IDataModelGet`1.GetAsync(PnP.Core.Services.ApiResponse,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Special override the load child model classes ==> if apiResponse != default then 
            no get will be done but the system will handle the mapping from json to model
            </summary>
            <param name="apiResponse">Json response (when in recursive mapping of json to model), default otherwise</param>
            <param name="expressions">The properties to select</param>
            <returns>The Domain Model object</returns>
        </member>
        <member name="T:PnP.Core.Model.IDataModelMappingHandler">
            <summary>
            Interface to the define the basic behavior of Domain Model object
            that can be mapped from a JSON response coming out of a REST request
            </summary>
        </member>
        <member name="P:PnP.Core.Model.IDataModelMappingHandler.MappingHandler">
            <summary>
            Handler that will fire when a property mapping does cannot be done automatically
            </summary>
        </member>
        <member name="P:PnP.Core.Model.IDataModelMappingHandler.PostMappingHandler">
            <summary>
            Handler that will fire after the full json to model operation was done
            </summary>
        </member>
        <member name="T:PnP.Core.Model.IDataModelParent">
            <summary>
            Interface to implement parent concept on all model objects
            </summary>
        </member>
        <member name="P:PnP.Core.Model.IDataModelParent.Parent">
            <summary>
            Represents the parent of the current domain model object
            </summary>
        </member>
        <member name="T:PnP.Core.Model.IDataModelUpdate">
            <summary>
            Defines the update interface for Domain Model objects that need update.
            </summary>
        </member>
        <member name="M:PnP.Core.Model.IDataModelUpdate.UpdateBatchAsync">
            <summary>
            Collects the request to update a Domain Model object into the remote data source 
            </summary>
        </member>
        <member name="M:PnP.Core.Model.IDataModelUpdate.UpdateBatchAsync(PnP.Core.Services.Batch)">
            <summary>
            Collects the request to update a Domain Model object into the remote data source using a batch
            </summary>
            <param name="batch">Batch add this request to</param>
        </member>
        <member name="M:PnP.Core.Model.IDataModelUpdate.UpdateAsync">
            <summary>
            Updates a Domain Model object into the remote data source 
            </summary>
        </member>
        <member name="T:PnP.Core.Model.IDataModelWithContext">
            <summary>
            Interface to implement PnPContext concept on all model objects
            </summary>
        </member>
        <member name="T:PnP.Core.Model.IDataModelWithKey">
            <summary>
            Defines the basic behavior for a Domain Model object with an identifying key
            </summary>
        </member>
        <member name="P:PnP.Core.Model.IDataModelWithKey.Key">
            <summary>
            Readonly property to get the untyped key of the object
            </summary>
        </member>
        <member name="T:PnP.Core.Model.IExpandoDataModel">
            <summary>
            Public interface to define an object extensible through a dictionary of metadata properties
            </summary>
        </member>
        <member name="P:PnP.Core.Model.IExpandoDataModel.Values">
            <summary>
            The dictionary of metadata properties
            </summary>
        </member>
        <member name="M:PnP.Core.Model.IExpandoDataModel.ToDynamic">
            <summary>
            Transforms the current model instance into a dynamic type
            </summary>
            <returns>Dynamic version of current model instance</returns>
        </member>
        <member name="T:PnP.Core.Model.IManageableCollection">
            <summary>
            Defines the behavior of a collection that can be managed
            with untyped prototype methods
            </summary>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection.CreateNew">
            <summary>
            Method to create a new item of the collection,
            ready to be added to the same collection
            </summary>
            <returns>The new item, ready to be added to the current collection</returns>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection.CreateNewAndAdd">
            <summary>
            Method to create a new typed item of the collection and immediately add it the collection
            </summary>
            <returns>The new item, added to the collection</returns>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection.Add(System.Object)">
            <summary>
            Method to add a new item to the collection
            </summary>
            <param name="item">The untyped item to add</param>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection.AddOrUpdate(System.Object,System.Predicate{System.Object})">
            <summary>
            Method to add a new untyped item or update an already existing one
            based on a selection predicate
            </summary>
            <param name="newItem">The untyped item to add</param>
            <param name="selector">The selection predicate for the already existing item, if any</param>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection.Remove(System.Object)">
            <summary>
            Method to remove an untyped item from the collection
            </summary>
            <param name="item">The untyped item to remove</param>
            <returns>True if the removal is successful</returns>
        </member>
        <member name="T:PnP.Core.Model.IManageableCollection`1">
            <summary>
            Defines the behavior of a collection that can be managed
            with fully typed prototype methods
            </summary>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection`1.CreateNew">
            <summary>
            Method to create a new typed item of the collection,
            ready to be added to the same collection
            </summary>
            <returns>The new item, ready to be added to the current collection</returns>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection`1.CreateNewAndAdd">
            <summary>
            Method to create a new typed item of the collection and immediately add it the collection
            </summary>
            <returns>The new item, added to the collection</returns>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection`1.Add(`0)">
            <summary>
            Method to add a new item to the collection
            </summary>
            <param name="item">The untyped item to add</param>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection`1.AddOrUpdate(`0,System.Predicate{`0})">
            <summary>
            Method to add a new fully typed item or update an already existing one
            based on a selection predicate
            </summary>
            <param name="newItem">The fully typed item to add</param>
            <param name="selector">The selection predicate for the already existing item, if any</param>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection`1.Remove(`0)">
            <summary>
            Method to remove an fully typed item from the collection
            </summary>
            <param name="item">The fully typed item to remove</param>
            <returns>True if the removal is successful</returns>
        </member>
        <member name="M:PnP.Core.Model.IManageableCollection`1.Replace(System.Int32,`0)">
            <summary>
            Replaces an item in the collection with a new one
            </summary>
            <param name="itemIndex">The index of the item to replace within the collection</param>
            <param name="newItem">New item to replace the old one with</param>
        </member>
        <member name="T:PnP.Core.Model.IMetadataExtensible">
            <summary>
            Defines the very basic interface for every object that is provided with metadata
            eventually with deferred loading
            </summary>
        </member>
        <member name="P:PnP.Core.Model.IMetadataExtensible.Metadata">
            <summary>
            Dictionary to access the domain model object Metadata
            </summary>
        </member>
        <member name="T:PnP.Core.Model.IRequestable">
            <summary>
            Defines the very basic interface for every object that is somehow requestable
            through an external querying system
            </summary>
        </member>
        <member name="P:PnP.Core.Model.IRequestable.Requested">
            <summary>
            Was this object requested, a collection with 0 items and Requested == false was never loaded
            </summary>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.Model.IRequestableCollection">
            <summary>
            Defines the very basic interface for every collection that is somehow requestable
            through an external querying system
            </summary>
        </member>
        <member name="P:PnP.Core.Model.IRequestableCollection.Requested">
            <summary>
            Was this collection requested, a collection with 0 items and Requested == false was never loaded
            </summary>
            <returns></returns>
        </member>
        <member name="P:PnP.Core.Model.IRequestableCollection.Length">
            <summary>
            Returns the size of the collection
            </summary>
        </member>
        <member name="P:PnP.Core.Model.IRequestableCollection.RequestedItems">
            <summary>
            Represents the items already requested from 
            the back-end service
            </summary>
        </member>
        <member name="T:PnP.Core.Model.ISupportPaging`1">
            <summary>
            Paged data retrieval can be done using the methods provided via this interface
            </summary>
        </member>
        <member name="P:PnP.Core.Model.ISupportPaging`1.CanPage">
            <summary>
            Determines whether paging is possible
            </summary>
        </member>
        <member name="M:PnP.Core.Model.ISupportPaging`1.GetPagedAsync(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets the first page with a given size
            </summary>
            <param name="pageSize">Size of the page to request, minimal size is 1</param>
            <param name="expressions">The properties to select</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.ISupportPaging`1.GetNextPageAsync">
            <summary>
            Gets the next page in a series
            </summary>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.ISupportPaging`1.GetAllPagesAsync">
            <summary>
            Retrieves all pages
            </summary>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.Model.TransientDictionary">
            <summary>
            Class tracks Dictionary changes 
            </summary>
        </member>
        <member name="P:PnP.Core.Model.TransientDictionary.ChangedProperties">
            <summary>
            Returns a list of changed properties
            </summary>
        </member>
        <member name="M:PnP.Core.Model.TransientDictionary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PnP.Core.Model.TransientDictionary.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor that initializes based upon an existing Dictionary
            </summary>
            <param name="input"><see cref="T:System.Collections.Generic.Dictionary`2"/> holding the key value pairs to add</param>
        </member>
        <member name="P:PnP.Core.Model.TransientDictionary.Item(System.String)">
            <summary>
            Gets or sets the value of an object in this dictionary
            </summary>
            <param name="key">Key of the object to set</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.TransientDictionary.Add(System.String,System.Object)">
            <summary>
            Adds a new item to the dictionary
            </summary>
            <param name="key">Key of the item to add</param>
            <param name="value">Value of the item to add</param>
        </member>
        <member name="M:PnP.Core.Model.TransientDictionary.SystemAdd(System.String,System.Object)">
            <summary>
            System add, does not mark the added property as changed
            </summary>
            <param name="key">Key of the item to add</param>
            <param name="value">Value of the item to add</param>
        </member>
        <member name="M:PnP.Core.Model.TransientDictionary.SystemAddRange(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            System add, does not mark the added property as changed
            </summary>
            <param name="key">Key of the item to add</param>
            <param name="value">Value of the item to add</param>
        </member>
        <member name="T:PnP.Core.Model.ValidateUpdate">
            <summary>
            Delegate used to connect model validation for one or more fields
            </summary>
            <param name="propertyUpdateRequest">Information about the property being updated</param>
        </member>
        <member name="T:PnP.Core.Model.TransientObject">
            <summary>
            Public abstract class to handle the internal state of properties for domain model object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.TransientObject.ValidateUpdateHandler">
            <summary>
            Validate update handler
            </summary>
        </member>
        <member name="P:PnP.Core.Model.TransientObject.ChangedProperties">
            <summary>
            Returns a list of changed properties
            </summary>
        </member>
        <member name="P:PnP.Core.Model.TransientObject.HasChanges">
            <summary>
            Are the changes done on this model instance
            </summary>
        </member>
        <member name="P:PnP.Core.Model.TransientObject.Deleted">
            <summary>
            Indication of logically deleted object, will be automatically removed from the collection
            </summary>
        </member>
        <member name="P:PnP.Core.Model.TransientObject.BatchRequestId">
            <summary>
            Id if the batch request that loaded this mode instance
            </summary>
        </member>
        <member name="M:PnP.Core.Model.TransientObject.SetSystemValue``1(``0,System.String)">
            <summary>
            Sets a property value without marking it as "changed"
            </summary>
            <typeparam name="T">Type of the property to set</typeparam>
            <param name="value">Value to set</param>
            <param name="propertyName">Name of the property</param>
        </member>
        <member name="M:PnP.Core.Model.TransientObject.Merge(PnP.Core.Model.TransientObject)">
            <summary>
            Merges the results from one object with the other. Will be typically used when:
            - The same object was requested twice in a batch
            - Refresh of an added object
            </summary>
            <param name="input"><see cref="T:PnP.Core.Model.TransientObject"/> to merge with this <see cref="T:PnP.Core.Model.TransientObject"/></param>
        </member>
        <member name="M:PnP.Core.Model.TransientObject.RemoveFromParentCollection">
            <summary>
            Marks a model as removed and removes it from it's parent collection
            </summary>
        </member>
        <member name="T:PnP.Core.Model.TypeExtensions">
            <summary>
            Extensions to the Type class
            </summary>
        </member>
        <member name="M:PnP.Core.Model.TypeExtensions.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Verify if a generic interface was implemented
            </summary>
            <param name="propertyType">Property to check on </param>
            <param name="interfaceType">Interface to check for</param>
            <returns>True if implemented, false otherwise</returns>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.Field">
            <summary>
            Field class, write your custom code here
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldLink">
            <summary>
            FieldLink class, write your custom code here
            </summary>
            <summary>
            Internal class representing a FieldLink object
            
            Note: this class is generated, please don't modify this code by hand!
            
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldLinkCollection">
            <summary>
            Collection of FieldLink Domain Model objects
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.List">
            <summary>
            List class, write your custom code here
            </summary>
            <summary>
            Internal class representing a List object
            
            Note: this class is generated, please don't modify this code by hand!
            
            </summary>    
        </member>
        <member name="T:PnP.Core.Model.SharePoint.ListCollection">
            <summary>
            Collection of List Domain Model objects
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.ListItem">
            <summary>
            ListItem class, write your custom code here
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.Site">
            <summary>
            Site class, write your custom code here
            </summary>
            <summary>
            Internal class representing a Site object
            
            Note: this class is generated, please don't modify this code by hand!
            
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.Web">
            <summary>
            Web class, write your custom code here
            </summary>
            <summary>
            Internal class representing a Web object
            
            Note: this class is generated, please don't modify this code by hand!
            
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.WebCollection">
            <summary>
            Collection of Web Domain Model objects
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.CamlQueryOptions">
            <summary>
            Options for making a CAML query to SharePoint Online
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CamlQueryOptions.ViewXml">
            <summary>
            Caml query to execute
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CamlQueryOptions.AllowIncrementalResults">
            <summary>
            Can the query return incremental results
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CamlQueryOptions.DatesInUtc">
            <summary>
            Return dates in UTC format
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CamlQueryOptions.FolderServerRelativeUrl">
            <summary>
            Specifies the server relative URL of a list folder from which results will be returned
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CamlQueryOptions.ListItemCollectionPosition">
            <summary>
            Value that specifies information, as name-value pairs, required to get the next page of data for a list view
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.AddFieldOptionsFlags">
            <summary>
            Specifies the control settings while adding a field.
            This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.AddFieldOptionsFlags.DefaultValue">
            <summary>
            Enumeration whose values specify that a new field added to the list must also be added to the default content type in the site collection.The value = 0.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.AddFieldOptionsFlags.AddToDefaultContentType">
            <summary>
            Enumeration whose values specify that a new field added to the list must also be added to the default content type in the site collection.The value = 1.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.AddFieldOptionsFlags.AddToNoContentType">
            <summary>
             Enumeration whose values specify that a new field must not be added to any other content type.The value = 2.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.AddFieldOptionsFlags.AddToAllContentTypes">
            <summary>
            Enumeration whose values specify that a new field that is added to the specified list must also be added to all content types in the site collection.The value = 4.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.AddFieldOptionsFlags.AddFieldInternalNameHint">
            <summary>
             Enumeration whose values specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations.The value = 8.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.AddFieldOptionsFlags.AddFieldToDefaultView">
            <summary>
             Enumeration whose values specify that a new field that is added to the specified list must also be added to the default list view.The value = 16.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.AddFieldOptionsFlags.AddFieldCheckDisplayName">
            <summary>
            Enumeration whose values specify to confirm that no other field has the same display name. The value = 32.
            /// </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.CalendarType">
            <summary>
            A calendar type is a 2-byte integer value that specifies the type of calendar to use in a particular context.
            https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee543260%28v%3doffice.15%29
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.None">
            <summary>
            The calendar type is not specified.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.Gregorian">
            <summary>
            Specifies Gregorian (localized) calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.Japan">
            <summary>
            Specifies a Japanese Emperor Era calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.Taiwan">
            <summary>
            Specifies a Year of Taiwan calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.Korea">
            <summary>
            Specifies a Korean Tangun Era calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.Hijri">
            <summary>
            Specifies a Hijri (Arabic Lunar) calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.Thai">
            <summary>
            Specifies a Thai calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.Hebrew">
            <summary>
            Specifies a Hebrew (Lunar) calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.GregorianMEFrench">
            <summary>
            Specifies a Gregorian (Middle East French) calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.GregorianArabic">
            <summary>
            Specifies a Gregorian (Arabic) calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.GregorianXLITEnglish">
            <summary>
            Specifies a Gregorian (transliterated English) calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.GregorianXLITFrench">
            <summary>
            Specifies a Gregorian (transliterated French) calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.KoreaJapanLunar">
            <summary>
            Specifies a Korean and Japanese Lunar calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.ChineseLunar">
            <summary>
            Specifies Chinese Lunar calendar type.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.CalendarType.SakaEra">
            <summary>
            Specifies a Saka Era calendar type.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.ChoiceFormatType">
            <summary>
            Enumeration that specifies how options are displayed for the selections in a choice field.
            https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee536424%28v%3doffice.15%29
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.ChoiceFormatType.Dropdown">
            <summary>
            A drop-down list box.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.ChoiceFormatType.RadioButtons">
            <summary>
            Option buttons (also known as radio buttons).
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.DateTimeFieldFormatType">
            <summary>
            Specifies the display format for date and time fields.
            https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537367%28v%3doffice.15%29
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.DateTimeFieldFormatType.DateOnly">
            <summary>
            Displays only the date.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.DateTimeFieldFormatType.DateTime">
            <summary>
            Displays the date and time.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.DateTimeFieldFriendlyFormatType">
            <summary>
            Specifies a friendly format to use in displaying date and time fields.
            https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/jj168261%28v%3doffice.15%29
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.DateTimeFieldFriendlyFormatType.Unspecified">
            <summary>
            Undefined. The default rendering will be used. Value = 0.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.DateTimeFieldFriendlyFormatType.Disabled">
            <summary>
            The standard absolute representation will be used. Value = 1.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.DateTimeFieldFriendlyFormatType.Relative">
            <summary>
            The standard friendly relative representation will be used (for example, "today at 3:00 PM"). Value = 2.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldType">
            <summary>
            Specifies the type of the field.
            https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee540543(v=office.15)
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Invalid">
            <summary>
            Must not be used. The value = 0.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Integer">
            <summary>
            Specifies that the field contains an integer value. The value = 1.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Text">
            <summary>
            Specifies that the field contains a single line of text. The value = 2.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Note">
            <summary>
            Specifies that the field contains multiple lines of text. The value = 3.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.DateTime">
            <summary>
            Specifies that the field contains a date and time value or a date-only value. The value = 4.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Counter">
            <summary>
            Specifies that the field contains a monotonically increasing integer. The value = 5.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Choice">
            <summary>
            Specifies that the field contains a single value from a set of specified values. The value = 6.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Lookup">
            <summary>
            Specifies that the field is a lookup field. The value = 7.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Boolean">
            <summary>
            Specifies that the field contains a Boolean value. The value = 8.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Number">
            <summary>
            Specifies that the field contains a floating-point number value. The value = 9.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Currency">
            <summary>
            Specifies that the field contains a currency value. The value = 10.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.URL">
            <summary>
            Specifies that the field contains a URI and an optional description of the URI. The value = 11.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Computed">
            <summary>
            Specifies that the field is a computed field. The value = 12.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Threading">
            <summary>
            Specifies that the field indicates the thread for a discussion item in a threaded view of a discussion board. The value = 13.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Guid">
            <summary>
            Specifies that the field contains a GUID value. The value = 14.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.MultiChoice">
            <summary>
            Specifies that the field contains one or more values from a set of specified values. The value = 15.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.GridChoice">
            <summary>
            Specifies that the field contains rating scale values for a survey list. The value = 16.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Calculated">
            <summary>
            Specifies that the field is a calculated field. The value = 17.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.File">
            <summary>
            Specifies that the field contains the leaf name of a document as a value. The value = 18.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Attachments">
            <summary>
            Specifies that the field indicates whether the list item has attachments. The value = 19.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.User">
            <summary>
            Specifies that the field contains one or more users and groups as values. The value = 20.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Recurrence">
            <summary>
            	Specifies that the field indicates whether a meeting in a calendar list recurs. The value = 21.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.CrossProjectLink">
            <summary>
            Specifies that the field contains a link between projects in a Meeting Workspace site. The value = 22.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.ModStat">
            <summary>
            Specifies that the field indicates moderation status. The value = 23.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.Error">
            <summary>
            Specifies that the type of the field was set to an invalid value. The value = 24.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.ContentTypeId">
            <summary>
            Specifies that the field contains a content type identifier as a value. The value = 25.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.PageSeparator">
            <summary>
            Specifies that the field separates questions in a survey list onto multiple pages. The value = 26.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.ThreadIndex">
            <summary>
            Specifies that the field indicates the position of a discussion item in a threaded view of a discussion board. The value = 27.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.WorkflowStatus">
            <summary>
            Specifies that the field indicates the status of a workflow instance on a list item. The value = 28.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.AllDayEvent">
            <summary>
            Specifies that the field indicates whether a meeting in a calendar list is an all-day event. The value = 29.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.WorkflowEventType">
            <summary>
            Specifies that the field contains the most recent event in a workflow instance. The value = 30.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldType.MaxItems">
            <summary>
            Must not be used. The value = 31.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldUserSelectionMode">
            <summary>
            Specifies whether users and groups or only users can be selected.
            https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee545809%28v%3doffice.15%29
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldUserSelectionMode.PeopleOnly">
            <summary>
            Enumeration whose value specifies that only users can be selected. The value = 0.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.FieldUserSelectionMode.PeopleAndGroups">
            <summary>
            Enumeration whose value specifies that users and groups can be selected. The value = 1.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.ListExperience">
            <summary>
            List experience, determines how a list is presented (modern or classic)
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.ListExperience.Auto">
            <summary>
             SPO will automatically define the right experience based on the settings of the current list, it is the default value.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.ListExperience.ClassicExperience">
            <summary>
            The Classic experience will be forced for the current list.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.ListExperience.NewExperience">
            <summary>
            The Modern experience will be forced for the current list.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.ListReadingDirection">
            <summary>
            Reading direction of the list
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.ListReadingDirection.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.ListReadingDirection.LTR">
            <summary>
            Left to Right
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.ListReadingDirection.RTL">
            <summary>
            Right to Left
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.ListTemplateType">
            <summary>
            Enumeration to define the list template types for SharePoint
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.RelationshipDeleteBehaviorType">
            <summary>
            Specifies the optional relationship behavior of a relationship lookup field.
            https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537368%28v%3doffice.15%29
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RelationshipDeleteBehaviorType.None">
            <summary>
            Enumeration whose value specifies that no relationship behavior is applied. . Value = 0.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RelationshipDeleteBehaviorType.Cascade">
            <summary>
            Enumeration whose value specifies the cascade behavior. Value = 1.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RelationshipDeleteBehaviorType.Restrict">
            <summary>
            Enumeration whose value specifies the restrict behavior. Value = 2.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags">
            <summary>
            Options to setup on the <see cref="T:PnP.Core.Model.SharePoint.RenderListDataOptions"/> RenderOptions property
            See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#sprenderlistdataoptions-options
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.None">
            <summary>
            Return default output
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.ContextInfo">
            <summary>
            Return list context information
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.ListData">
            <summary>
            Return list data (same as None)
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.ListSchema">
            <summary>
            Return list schema
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.MenuView">
            <summary>
            Return HTML for the list menu
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.ListContentType">
            <summary>
            Returns information about list content types. Must be combined with the ContextInfo flag
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.FileSystemItemId">
            <summary>
            The returned list will have a FileSystemItemId field on each item if possible. Must be combined with the ListData flag
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.ClientFormSchema">
            <summary>
            Returns the client form schema to add and edit items
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.QuickLaunch">
            <summary>
            Returns QuickLaunch navigation nodes
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.Spotlight">
            <summary>
            Returns Spotlight rendering information
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.Visualization">
            <summary>
            Returns Visualization rendering information
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.ViewMetadata">
            <summary>
            Returns view XML and other information about the current view
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.DisableAutoHyperlink">
            <summary>
            Prevents AutoHyperlink from being run on text fields in this query
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.EnableMediaTAUrls">
            <summary>
            Enables URLs pointing to Media TA service, such as .thumbnailUrl, .videoManifestUrl, .pdfConversionUrls
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.ParentInfo">
            <summary>
            Returns parent folder information
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.PageContextInfo">
            <summary>
            Returns page context info for the current list being rendered
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.ClientSideComponentManifest">
            <summary>
            Return client-side component manifest information associated with the list (reserved for future use)
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.SearchBoxInNavBar">
            <summary>
            Searchbox in navigation options
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.SearchScopes">
            <summary>
            Search scopes of the site
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.SearchScopes.DefaultScope">
            <summary>
            Defines the DefaultScope for the SearchScope of the site
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.SearchScopes.Tenant">
            <summary>
            Defines the Tenant for the SearchScope of the site
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.SearchScopes.Hub">
            <summary>
            Defines the Hub for the SearchScope of the site
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.SearchScopes.Site">
            <summary>
            Defines the Site for the SearchScope of the site
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.UrlFieldFormatType.Hyperlink">
            <summary>
            Specify that the value must be displayed as a hyperlink.
            </summary>
        </member>
        <member name="F:PnP.Core.Model.SharePoint.UrlFieldFormatType.Image">
            <summary>
            Specify that the value must be displayed as an image. 
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldOptions">
            <summary>
            Available options for all SharePoint fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldOptions.Required">
            <summary>
            Sets whether the field is required
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.CommonFieldOptions">
            <summary>
            Available options for adding most of SharePoint fields
            (Excepted Lookup fields)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CommonFieldOptions.Description">
            <summary>
            Sets the description of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CommonFieldOptions.DefaultFormula">
            <summary>
            Sets the default formula of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CommonFieldOptions.EnforceUniqueValues">
            <summary>
            Sets whether the field enforces unique values
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CommonFieldOptions.Group">
            <summary>
            Sets the group of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CommonFieldOptions.Hidden">
            <summary>
            Sets whether the field is hidden
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CommonFieldOptions.Indexed">
            <summary>
            Sets whether the field is indexed
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CommonFieldOptions.Required">
            <summary>
            Sets whether the field is required
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CommonFieldOptions.ValidationFormula">
            <summary>
            Sets the validation formula of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.CommonFieldOptions.ValidationMessage">
            <summary>
            Sets the validation message of the field
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldTextOptions">
            <summary>
            Available options for SharePoint Text fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldTextOptions.MaxLength">
            <summary>
            Gets or sets the maximum length of the text field.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldMultilineTextOptions">
            <summary>
            Available options for SharePoint Multiline Text fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldMultilineTextOptions.AllowHyperlink">
            <summary>
            Gets or sets a value that specifies whether a hyperlink is allowed as a value of the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldMultilineTextOptions.AppendOnly">
            <summary>
            Gets or sets a value that specifies whether all changes to the value of the field are displayed in list forms.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldMultilineTextOptions.NumberOfLines">
            <summary>
            Gets or sets a value that specifies the number of lines of text to display for the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldMultilineTextOptions.RestrictedMode">
            <summary>
            Gets or sets a value that specifies whether the field supports a subset of rich formatting.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldMultilineTextOptions.RichText">
            <summary>
            Gets or sets a value that specifies whether the field supports rich formatting.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldMultilineTextOptions.UnlimitedLengthInDocumentLibrary">
            <summary>
            Gets or sets a value that specifies whether the field supports unlimited length in document libraries.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldUrlOptions">
            <summary>
            Available options for SharePoint URL fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldUrlOptions.DisplayFormat">
            <summary>
            Gets or sets a value that specifies the display format for the value in the field.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldNumberOptions">
            <summary>
            Available options for SharePoint Number fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldNumberOptions.MaximumValue">
            <summary>
            Gets or sets a value that specifies the maximum allowed value for the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldNumberOptions.MinimumValue">
            <summary>
            Gets or sets a value that specifies the minimum allowed value for the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldNumberOptions.ShowAsPercentage">
            <summary>
            Gets or sets whether the field must be shown as percentage.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldDateTimeOptions">
            <summary>
            Available options for SharePoint DateTime fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldDateTimeOptions.DateTimeCalendarType">
            <summary>
            Gets or sets a value that specifies the calendar type of the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldDateTimeOptions.DisplayFormat">
            <summary>
            Gets or sets the type of date and time format that is used in the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldDateTimeOptions.FriendlyDisplayFormat">
            <summary>
            Gets or sets the type of friendly display format that is used in the field.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldCalculatedOptions">
            <summary>
            Available options for SharePoint Calculated fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldCalculatedOptions.CurrencyLocaleId">
            <summary>
            Gets or sets a value that specifies the language code identifier (LCID) used to format the value of the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldCalculatedOptions.DateFormat">
            <summary>
            Gets or sets the type of date and time format that is used in the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldCalculatedOptions.Formula">
            <summary>
            Gets or sets a value that specifies the formula for the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldCalculatedOptions.OutputType">
            <summary>
            Gets or sets a value that specifies the output format for the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldCalculatedOptions.ShowAsPercentage">
            <summary>
            Gets or sets whether the field must be shown as percentage.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldCurrencyOptions">
            <summary>
            Available options for SharePoint Currency fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldCurrencyOptions.CurrencyLocaleId">
            <summary>
            Gets or sets a value that specifies the language code identifier (LCID) used to format the value of the field.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldMultiChoiceOptions">
            <summary>
            Available options for SharePoint Multi Choice fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldMultiChoiceOptions.FillInChoice">
            <summary>
            Gets or sets a value that specifies whether the field can accept values other than those specified in Choices.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldMultiChoiceOptions.Choices">
            <summary>
            Gets or sets a value that specifies values that are available for selection in the field.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldChoiceOptions">
            <summary>
            Available options for SharePoint Choice fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldChoiceOptions.EditFormat">
            <summary>
            Determines whether to display the choice field as option buttons (also known as “radio buttons”) or as a drop-down list.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldLookupOptions">
            <summary>
            Available options for SharePoint lookup fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldLookupOptions.LookupFieldName">
            <summary>
            Gets or sets a value that specifies the internal field name of the field used as the lookup values.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldLookupOptions.LookupListId">
            <summary>
            Gets or sets a value that specifies the list identifier of the list that contains the field to use as the lookup values.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldLookupOptions.LookupWebId">
            <summary>
            Gets or sets a value that specifies the GUID that identifies the site containing the list which contains the field used as the lookup values.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.FieldUserOptions">
            <summary>
            Available options for SharePoint user fields
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldUserOptions.AllowMultipleValues">
            <summary>
            Gets or sets a value that specifies whether to allow multiple values.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldUserOptions.AllowDisplay">
            <summary>
            Gets or sets a value that specifies whether to display the name of the user in a survey list.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldUserOptions.Presence">
            <summary>
            Gets or sets a value that specifies whether presence is enabled on the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldUserOptions.SelectionGroup">
            <summary>
            Gets or sets a value that specifies the identifier of the SharePoint group whose members can be selected as values of the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.FieldUserOptions.SelectionMode">
            <summary>
            Gets or sets a value that specifies whether users and groups or only users can be selected.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IContentType">
            <summary>
            Public interface to define a Content Type object of SharePoint Online
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.StringId">
            <summary>
            The unique ID of the Content Type as string
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.Id">
            <summary>
            The unique ID of the Content Type as object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.ClientFormCustomFormatter">
            <summary>
            Gets or Sets the Client Form Custom Formatter of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.Description">
            <summary>
            Gets or Sets the description of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.DisplayFormTemplateName">
            <summary>
            Gets or Sets the Display Form template name of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.DisplayFormUrl">
            <summary>
            Gets or Sets the Display Form URL of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.DocumentTemplate">
            <summary>
            Gets or Sets the Document Template of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.DocumentTemplateUrl">
            <summary>
            Gets or Sets the DocumentTemplate URL of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.EditFormTemplateName">
            <summary>
            Gets or Sets the Edit Form template name of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.EditFormUrl">
            <summary>
            Gets or Sets the Edit Form URL of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.Group">
            <summary>
            Gets or Sets the group of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.Hidden">
            <summary>
            Gets or Sets that specifies whether the Content Type is hidden
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.JSLink">
            <summary>
            Gets or Sets the JS Link of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.MobileDisplayFormUrl">
            <summary>
            Gets or Sets the Mobile Display Form URL of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.MobileEditFormUrl">
            <summary>
            Gets or Sets the Mobile Edit Form URL of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.MobileNewFormUrl">
            <summary>
            Gets or Sets the Mobile New Form URL of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.Name">
            <summary>
            Gets or Sets the name of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.NewFormTemplateName">
            <summary>
            Gets or Sets the New Form template's name of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.NewFormUrl">
            <summary>
            Gets or Sets the New Form URL of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.ReadOnly">
            <summary>
            Gets or Sets whether the Content Type is read only
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.SchemaXml">
            <summary>
            Gets or Sets the Schema XML of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.SchemaXmlWithResourceTokens">
            <summary>
            Gets or Sets the Schema XML with resource tokens of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.Scope">
            <summary>
            Gets or Sets the scope of the Content Type
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.Sealed">
            <summary>
            Gets or Sets whether the Content Type is sealed
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IContentType.FieldLinks">
            <summary>
            Gets the collection of field links of the Content Type.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IContentTypeCollection">
            <summary>
            Public interface to define a collection of ContentType objects of SharePoint Online
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IContentTypeCollection.AddBatchAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Add a content type
            Check the documentation for a well formed Content Type Id:
            https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14)
            </summary>
            <param name="id">Id of the content type</param>
            <param name="name">Name of the content type</param>
            <param name="description">Description of the content type</param>
            <param name="group">Group of the content type</param>
            <returns>The newly added content type</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IContentTypeCollection.AddBatchAsync(PnP.Core.Services.Batch,System.String,System.String,System.String,System.String)">
            <summary>
            Add a content type
            Check the documentation for a well formed Content Type Id:
            https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14)
            </summary>
            <param name="batch"><see cref="T:PnP.Core.Services.Batch"/> to use</param>
            <param name="id">Id of the content type</param>
            <param name="name">Name of the content type</param>
            <param name="description">Description of the content type</param>
            <param name="group">Group of the content type</param>
            <returns>The newly added content type</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IContentTypeCollection.AddAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Add a content type
            Check the documentation for a well formed Content Type Id:
            https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14)
            </summary>
            <param name="id">Id of the content type</param>
            <param name="name">Name of the content type</param>
            <param name="description">Description of the content type</param>
            <param name="group">Group of the content type</param>
            <returns>The newly added content type</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IContentTypeCollection.AddAvailableContentTypeBatchAsync(System.String)">
            <summary>
            Add an existing content type
            </summary>
            <param name="id">Id of the content type</param>
            <returns>The newly added content type</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IContentTypeCollection.AddAvailableContentTypeBatchAsync(PnP.Core.Services.Batch,System.String)">
            <summary>
            Add an existing content type
            </summary>
            <param name="batch"><see cref="T:PnP.Core.Services.Batch"/> to use</param>
            <param name="id">Id of the content type</param>
            <returns>The newly added content type</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IContentTypeCollection.AddAvailableContentTypeAsync(System.String)">
            <summary>
            Add an existing content type
            </summary>
            <param name="id">Id of the content type</param>
            <returns>The newly added content type</returns>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IField">
            <summary>
            Public interface to define a Field object of SharePoint Online
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.AutoIndexed">
            <summary>
            Gets or Sets whether the field is auto indexed
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.CanBeDeleted">
            <summary>
            Gets or Sets whether the field can be deleted
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.ClientSideComponentId">
            <summary>
            Gets or Sets the client side component Id associated with the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.ClientSideComponentProperties">
            <summary>
            Gets or Sets the properties of the client side component associated with the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.ClientValidationFormula">
            <summary>
            Gets or Sets the client validation formula of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.ClientValidationMessage">
            <summary>
            Gets or Sets the client validation message of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.CustomFormatter">
            <summary>
            Gets or Sets custom formatter of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.DefaultFormula">
            <summary>
            Gets or Sets the default formula of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.DefaultValue">
            <summary>
            Gets or Sets the default value of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Description">
            <summary>
            Gets or Sets the description of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Direction">
            <summary>
            Gets or Sets the direction of the field
            TODO use enum for this field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.EnforceUniqueValues">
            <summary>
            Gets or Sets whether the field enforces unique values
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.EntityPropertyName">
            <summary>
            Gets or Sets the entity property name of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Filterable">
            <summary>
            Gets or Sets whether the field can be used as filter
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.FromBaseType">
            <summary>
            Gets or Sets whether the field is from base type
            TODO : Review comment
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Group">
            <summary>
            Gets or Sets the group of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Hidden">
            <summary>
            Gets or Sets whether the field is hidden
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Id">
            <summary>
            Gets or Sets the id of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Indexed">
            <summary>
            Gets or Sets whether the field is indexed
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.IndexStatus">
            <summary>
            Gets or Sets the index status of the field
            TODO: What should be done for read-only fields ?
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.InternalName">
            <summary>
            Gets or Sets the internal name of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.JSLink">
            <summary>
            Gets or Sets the JS link of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.PinnedToFiltersPane">
            <summary>
            Gets or Sets whether the field is pinned to filters pane
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.ReadOnlyField">
            <summary>
            Gets or Sets whether the field is read only
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Required">
            <summary>
            Gets or Sets whether the field is required
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.SchemaXml">
            <summary>
            Gets or Sets the schema XML of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Scope">
            <summary>
            Gets or Sets the scope of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Sealed">
            <summary>
            Gets or Sets whether the field is sealed
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.ShowInFiltersPane">
            <summary>
            Gets or Sets whether the field is shown in filters pane
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Sortable">
            <summary>
            Gets or Sets whether the field can be sorted
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.StaticName">
            <summary>
            Gets or Sets the static name of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Title">
            <summary>
            Gets or Sets the title of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.FieldTypeKind">
            <summary>
            Gets or Sets the field type kind of the field
            https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee540543%28v%3doffice.15%29
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.TypeAsString">
            <summary>
            Gets or Sets the type of the field as string value
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.TypeDisplayName">
            <summary>
            Gets or Sets the display name of the type of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.TypeShortDescription">
            <summary>
            Gets or Sets a short description of the type of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.ValidationFormula">
            <summary>
            Gets or Sets the validation formula of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.ValidationMessage">
            <summary>
            Gets or Sets the validation message of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.MaxLength">
            <summary>
            Gets or Sets the maximum length of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.CurrencyLocaleId">
            <summary>
            Gets or Sets the Locale Id of the currency
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.DateFormat">
            <summary>
            Gets or Sets the Date Format 
            Valid for DateTime field, Calculated field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.DisplayFormat">
            <summary>
            Gets or Sets the display format of the field
            CAUTION: Is an integer value since according to field type, the display format enum may change
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.EditFormat">
            <summary>
            Gets or Sets the edit format of the field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.ShowAsPercentage">
            <summary>
            Gets or Sets whether the field should be shown as percentage
            Valid for Number field, Calculated field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.AllowHyperlink">
            <summary>
            Gets or sets a value that specifies whether a hyperlink is allowed as a value of the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.AppendOnly">
            <summary>
            Gets or sets a value that specifies whether all changes to the value of the field are displayed in list forms.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.NumberOfLines">
            <summary>
            Gets or sets a value that specifies the number of lines of text to display for the field.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.RestrictedMode">
            <summary>
            Gets or sets a value that specifies whether the field supports a subset of rich formatting.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.RichText">
            <summary>
            Gets or sets a value that specifies whether the field supports rich formatting.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.UnlimitedLengthInDocumentLibrary">
            <summary>
            Gets or sets a value that specifies whether the field supports unlimited length in document libraries.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.MaximumValue">
            <summary>
            Gets or sets the maximum value of a number field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.MinimumValue">
            <summary>
            Gets or sets the minimum value of a number field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Formula">
            <summary>
            Gets or sets the formula of a calculated field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.OutputType">
            <summary>
            Gets or sets the type of a calculated field output
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.EnableLookup">
            <summary>
            Gets or sets whether the lookup should be enabled for computed field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.FillInChoice">
            <summary>
            Gets or sets whether choice field can be filled in by user
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Mappings">
            <summary>
            Gets the mappings of a choice field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Choices">
            <summary>
            Gets or sets the choices of choice field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.DateTimeCalendarType">
            <summary>
            Gets or sets the type of calendar to use of a DateTime field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.FriendlyDisplayFormat">
            <summary>
            Gets or sets the friendly format type of a DateTime field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.AllowMultipleValues">
            <summary>
            Gets or sets whether the lookup fields allows multiple values
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.DependentLookupInternalNames">
            <summary>
            Gets or sets the dependent lookup internal names of a lookup field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.IsDependentLookup">
            <summary>
            Gets or sets whether a lookup field is dependent lookup
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.IsRelationship">
            <summary>
            Gets or sets whether a lookup field is a relationship
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.LookupField">
            <summary>
            Gets or sets the internal name of the related field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.LookupList">
            <summary>
            Gets or sets the Id of the related list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.LookupWebId">
            <summary>
            Gets or sets the lookup web Id
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.PrimaryFieldId">
            <summary>
            Gets or sets the primary field Id of the lookup field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.RelationshipDeleteBehavior">
            <summary>
            Gets or sets the deletion behavior with the relationship of the lookup field
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.AllowDisplay">
            <summary>
            Gets or sets whether to allow display if the user name
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.Presence">
            <summary>
            Gets or sets whether to display the presence indicator of the user
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.SelectionGroup">
            <summary>
            Gets or sets the Id of the group to which the users to select belong to
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IField.SelectionMode">
            <summary>
            Gets or sets the selection mode of the user field
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IFieldCollection">
            <summary>
            Public interface to define a collection of Field objects of SharePoint Online
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldType,PnP.Core.Model.SharePoint.FieldOptions)">
            <summary>
            Adds a new field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="fieldType">The type of the field to add</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddTextBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldTextOptions)">
            <summary>
            Adds a new Text field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddMultilineTextBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldMultilineTextOptions)">
            <summary>
            Adds a new multiline Text field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddUrlBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldUrlOptions)">
            <summary>
            Adds a new URL field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddNumberBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldNumberOptions)">
            <summary>
            Adds a new Number field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddDateTimeBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldDateTimeOptions)">
            <summary>
            Adds a new DateTime field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddCalculatedBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldCalculatedOptions)">
            <summary>
            Adds a new Calculated field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddCurrencyBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldCurrencyOptions)">
            <summary>
            Adds a new Currency field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddMultiChoiceBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldMultiChoiceOptions)">
            <summary>
            Adds a new MultiChoice field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddChoiceBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldChoiceOptions)">
            <summary>
            Adds a new Choice field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddLookupBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldLookupOptions)">
            <summary>
            Adds a new Lookup field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddUserBatchAsync(System.String,PnP.Core.Model.SharePoint.FieldUserOptions)">
            <summary>
            Adds a new User field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldType,PnP.Core.Model.SharePoint.FieldOptions)">
            <summary>
            Adds a new field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="fieldType">The type of the field to add</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddTextBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldTextOptions)">
            <summary>
            Adds a new Text field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddMultilineTextBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldMultilineTextOptions)">
            <summary>
            Adds a new multiline Text field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddUrlBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldUrlOptions)">
            <summary>
            Adds a new URL field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddNumberBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldNumberOptions)">
            <summary>
            Adds a new Number field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddDateTimeBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldDateTimeOptions)">
            <summary>
            Adds a new DateTime field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddCalculatedBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldCalculatedOptions)">
            <summary>
            Adds a new Calculated field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddCurrencyBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldCurrencyOptions)">
            <summary>
            Adds a new Currency field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddMultiChoiceBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldMultiChoiceOptions)">
            <summary>
            Adds a new MultiChoice field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddChoiceBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldChoiceOptions)">
            <summary>
            Adds a new Choice field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddLookupBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldLookupOptions)">
            <summary>
            Adds a new Lookup field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddUserBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.FieldUserOptions)">
            <summary>
            Adds a new User field to the collection
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddAsync(System.String,PnP.Core.Model.SharePoint.FieldType,PnP.Core.Model.SharePoint.FieldOptions)">
            <summary>
            Adds a new field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="fieldType">The type of the field to add</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddTextAsync(System.String,PnP.Core.Model.SharePoint.FieldTextOptions)">
            <summary>
            Adds a new Text field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddMultilineTextAsync(System.String,PnP.Core.Model.SharePoint.FieldMultilineTextOptions)">
            <summary>
            Adds a new multiline Text field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddUrlAsync(System.String,PnP.Core.Model.SharePoint.FieldUrlOptions)">
            <summary>
            Adds a new URL field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddNumberAsync(System.String,PnP.Core.Model.SharePoint.FieldNumberOptions)">
            <summary>
            Adds a new Number field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddDateTimeAsync(System.String,PnP.Core.Model.SharePoint.FieldDateTimeOptions)">
            <summary>
            Adds a new DateTime field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddCalculatedAsync(System.String,PnP.Core.Model.SharePoint.FieldCalculatedOptions)">
            <summary>
            Adds a new Calculated field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddCurrencyAsync(System.String,PnP.Core.Model.SharePoint.FieldCurrencyOptions)">
            <summary>
            Adds a new Currency field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddMultiChoiceAsync(System.String,PnP.Core.Model.SharePoint.FieldMultiChoiceOptions)">
            <summary>
            Adds a new MultiChoice field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddChoiceAsync(System.String,PnP.Core.Model.SharePoint.FieldChoiceOptions)">
            <summary>
            Adds a new Choice field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddLookupAsync(System.String,PnP.Core.Model.SharePoint.FieldLookupOptions)">
            <summary>
            Adds a new Lookup field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddUserAsync(System.String,PnP.Core.Model.SharePoint.FieldUserOptions)">
            <summary>
            Adds a new User field to the collection
            </summary>
            <param name="title">The title of the field</param>
            <param name="options">The specific options for field creation</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddFieldAsXmlBatchAsync(System.String,System.Boolean,PnP.Core.Model.SharePoint.AddFieldOptionsFlags)">
            <summary>
            Adds a new field from its XML schema
            </summary>
            <param name="schemaXml">
            A Collaborative Application Markup Language (CAML) string that contains the schema.
            It must not be a null reference(Nothing in Visual Basic). 
            It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1.
            </param>
            <param name="addToDefaultView">Specifies to add the field to the default list view.
            <c>true</c> if the field is added to the default list view; otherwise, <c>false</c>.</param>
            <param name="options">An AddFieldOptionsFlags value that specifies the field options.</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddFieldAsXmlBatchAsync(PnP.Core.Services.Batch,System.String,System.Boolean,PnP.Core.Model.SharePoint.AddFieldOptionsFlags)">
            <summary>
            Adds a new field from its XML schema
            </summary>
            <param name="batch">Batch to use</param>
            <param name="schemaXml">
            A Collaborative Application Markup Language (CAML) string that contains the schema.
            It must not be a null reference(Nothing in Visual Basic). 
            It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1.
            </param>
            <param name="addToDefaultView">Specifies to add the field to the default list view.
            <c>true</c> if the field is added to the default list view; otherwise, <c>false</c>.</param>
            <param name="options">An AddFieldOptionsFlags value that specifies the field options.</param>
            <returns>The added field</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFieldCollection.AddFieldAsXmlAsync(System.String,System.Boolean,PnP.Core.Model.SharePoint.AddFieldOptionsFlags)">
            <summary>
            Adds a new field from its XML schema
            </summary>
            <param name="schemaXml">
            A Collaborative Application Markup Language (CAML) string that contains the schema.
            It must not be a null reference(Nothing in Visual Basic). 
            It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1.
            </param>
            <param name="addToDefaultView">Specifies to add the field to the default list view.
            <c>true</c> if the field is added to the default list view; otherwise, <c>false</c>.</param>
            <param name="options">An AddFieldOptionsFlags value that specifies the field options.</param>
            <returns>The added field</returns>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IFieldLink">
            <summary>
            Public interface to define a FieldLink object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFieldLink.DisplayName">
            <summary>
            Gets or sets the display name of the field in the field link.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFieldLink.FieldInternalName">
            <summary>
            Gets or sets the field internal name specified in the field link.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFieldLink.Hidden">
            <summary>
            Gets or sets a Boolean value that specifies whether the field is displayed in forms that can be edited.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFieldLink.Id">
            <summary>
            Gets a value that specifies the GUID of the FieldLink.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFieldLink.Name">
            <summary>
            Gets a value that specifies the name of the FieldLink.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFieldLink.ReadOnly">
            <summary>
            Gets or sets whether the field is read-only.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFieldLink.Required">
            <summary>
            Gets or sets whether the field is required.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFieldLink.ShowInDisplayForm">
            <summary>
            Gets or sets whether the field should be shown in display form.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IFieldLinkCollection">
            <summary>
            Public interface to define a collection of Field objects of SharePoint Online
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IList">
            <summary>
            Public interface to define a List object of SharePoint Online
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.Id">
            <summary>
            The Unique ID of the List object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.Title">
            <summary>
            Gets or sets the list title
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.Description">
            <summary>
            Gets or sets the description of the list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.DocumentTemplate">
            <summary>
            Gets or sets a value that specifies the identifier of the document template for the new list.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.OnQuickLaunch">
            <summary>
            Gets or sets a value that specifies whether the new list is displayed on the Quick Launch of the site.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.TemplateType">
            <summary>
            Gets or sets a value that specifies the list server template of the new list.
            https://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.listtemplatetype.aspx
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.Url">
            <summary>
            Gets or sets a value that specifies whether the new list is displayed on the Quick Launch of the site.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.EnableVersioning">
            <summary>
            Gets or sets whether verisioning is enabled on the list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.EnableMinorVersions">
            <summary>
            Gets or sets whether minor verisioning is enabled on the list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.DraftVersionVisibility">
            <summary>
            Gets or sets the DraftVersionVisibility for the list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.EnableModeration">
            <summary>
            Gets or sets whether moderation/content approval is enabled on the list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.MinorVersionLimit">
            <summary>
            Gets or sets the MinorVersionLimit  for versioning, just in case it is enabled on the list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.MaxVersionLimit">
            <summary>
            Gets or sets the MinorVersionLimit  for verisioning, just in case it is enabled on the list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.ContentTypesEnabled">
            <summary>
            Gets or sets whether content types are enabled
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.Hidden">
            <summary>
            Gets or sets whether to hide the list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.ForceCheckout">
            <summary>
            Gets or sets whether to force checkout of documents in the library
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.EnableAttachments">
            <summary>
            Gets or sets whether attachments are enabled. Defaults to true.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.EnableFolderCreation">
            <summary>
            Gets or sets whether folder is enabled. Defaults to true.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.TemplateFeatureId">
            <summary>
            Gets or sets the Guid for TemplateFeature
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.FieldDefaults">
            <summary>
            Defines a list of default values for the Fields of the List Instance
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.NoCrawl">
            <summary>
            Defines if the current list or library has to be included in crawling, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.ListExperience">
            <summary>
            Defines the current list UI/UX experience (valid for SPO only).
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.DefaultDisplayFormUrl">
            <summary>
            Defines a value that specifies the location of the default display form for the list.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.DefaultEditFormUrl">
            <summary>
            Defines a value that specifies the URL of the edit form to use for list items in the list.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.DefaultNewFormUrl">
            <summary>
            Defines a value that specifies the location of the default new form for the list.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.Direction">
            <summary>
            Defines a value that specifies the reading order of the list.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.ImageUrl">
            <summary>
            Defines a value that specifies the URI for the icon of the list, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.IrmExpire">
            <summary>
            Defines if IRM Expire property, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.IrmReject">
            <summary>
            Defines the IRM Reject property, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.IsApplicationList">
            <summary>
            Defines a value that specifies a flag that a client application can use to determine whether to display the list, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.ReadSecurity">
            <summary>
            Defines the Read Security property, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.WriteSecurity">
            <summary>
            Defines the Write Security property, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.ValidationFormula">
            <summary>
            Defines a value that specifies the data validation criteria for a list item, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.ValidationMessage">
            <summary>
            Defines a value that specifies the error message returned when data validation fails for a list item, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.Items">
            <summary>
            Collection of list items in the current List object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.ContentTypes">
            <summary>
            Collection of content types for this list
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IList.Fields">
            <summary>
            Collection of fields for this list
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IList.RecycleAsync">
            <summary>
            Moves this list into the site collection recycle bin, returns the recyle bin item id
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IList.GetItemsByCamlQueryAsync(System.String)">
            <summary>
            Loads list items based up on a CAML query
            </summary>
            <param name="query">query to execute</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IList.GetItemsByCamlQueryAsync(PnP.Core.Model.SharePoint.CamlQueryOptions)">
            <summary>
            Loads list items based up on a CAML query
            </summary>
            <param name="queryOptions"><see cref="T:PnP.Core.Model.SharePoint.CamlQueryOptions"/> defining the query to execute</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IList.GetItemsByCamlQueryBatchAsync(System.String)">
            <summary>
            Loads list items based up on a CAML query
            </summary>
            <param name="query">query to execute</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IList.GetItemsByCamlQueryBatchAsync(PnP.Core.Model.SharePoint.CamlQueryOptions)">
            <summary>
            Loads list items based up on a CAML query
            </summary>
            <param name="queryOptions"><see cref="T:PnP.Core.Model.SharePoint.CamlQueryOptions"/> defining the query to execute</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IList.GetItemsByCamlQueryBatchAsync(PnP.Core.Services.Batch,System.String)">
            <summary>
            Loads list items based up on a CAML query
            </summary>
            <param name="batch">Batch to add this request to </param>
            <param name="query">query to execute</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IList.GetItemsByCamlQueryBatchAsync(PnP.Core.Services.Batch,PnP.Core.Model.SharePoint.CamlQueryOptions)">
            <summary>
            Loads list items based up on a CAML query
            </summary>
            <param name="batch">Batch to add this request to </param>
            <param name="queryOptions"><see cref="T:PnP.Core.Model.SharePoint.CamlQueryOptions"/> defining the query to execute</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IList.GetListDataAsStreamAsync(PnP.Core.Model.SharePoint.RenderListDataOptions)">
            <summary>
            Loads list items based up on a CAML query and the RenderListDataAsStream API
            </summary>
            <param name="renderOptions"><see cref="T:PnP.Core.Model.SharePoint.RenderListDataOptions"/> defining the query to execute</param>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IListCollection">
            <summary>
            Public interface to define a collection of List objects of SharePoint Online
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListCollection.BatchGetByTitleAsync(System.String,System.Linq.Expressions.Expression{System.Func{PnP.Core.Model.SharePoint.IList,System.Object}}[])">
            <summary>
            Gets a list by title via a batch request
            </summary>
            <param name="title">Title of the list to get</param>
            <returns>Loaded list, null is not found</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListCollection.AddAsync(System.String,PnP.Core.Model.SharePoint.ListTemplateType)">
            <summary>
            Adds a new list
            </summary>
            <param name="title">Title of the list</param>
            <param name="templateType">Template type</param>
            <returns>Newly added list</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListCollection.AddBatchAsync(PnP.Core.Services.Batch,System.String,PnP.Core.Model.SharePoint.ListTemplateType)">
            <summary>
            Adds a new list
            </summary>
            <param name="batch">Batch to use</param>
            <param name="title">Title of the list</param>
            <param name="templateType">Template type</param>
            <returns>Newly added list</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListCollection.AddBatchAsync(System.String,PnP.Core.Model.SharePoint.ListTemplateType)">
            <summary>
            Adds a new list
            </summary>
            <param name="title">Title of the list</param>
            <param name="templateType">Template type</param>
            <returns>Newly added list</returns>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IListItem">
            <summary>
            Public interface to define a SharePoint Online list item
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IListItem.Id">
            <summary>
            Id of the list item
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IListItem.CommentsDisabled">
            <summary>
            Can comments be added to this list item
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IListItem.Title">
            <summary>
            Title value of the list item
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItem.SystemUpdateAsync">
            <summary>
            Performs a system update of the list item
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItem.SystemUpdateBatchAsync">
            <summary>
            Performs a system update of the list item
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItem.SystemUpdateBatchAsync(PnP.Core.Services.Batch)">
            <summary>
            Performs a system update of the list item
            </summary>
            <param name="batch">Batch to add the systemupdate request to</param>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItem.UpdateOverwriteVersionAsync">
            <summary>
            Performs a UpdateOverwriteVersion of the list item
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItem.UpdateOverwriteVersionBatchAsync">
            <summary>
            Performs a UpdateOverwriteVersion of the list item
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItem.UpdateOverwriteVersionBatchAsync(PnP.Core.Services.Batch)">
            <summary>
            Performs a UpdateOverwriteVersion of the list item
            </summary>
            <param name="batch">Batch to add the UpdateOverwriteVersion request to</param>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IListItemCollection">
            <summary>
            Public interface to define a collection of ListItem objects of SharePoint Online
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItemCollection.AddAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a new list item
            </summary>
            <param name="values">Values to add to list item</param>
            <returns>Newly added list item</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItemCollection.AddBatchAsync(PnP.Core.Services.Batch,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a new list item
            </summary>
            <param name="batch">Batch to use</param>
            <param name="values">Values to add to list item</param>
            <returns>Newly added list item</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItemCollection.AddBatchAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a new list item
            </summary>
            <param name="values">Values to add to list item</param>
            <returns>Newly added list item</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IListItemCollection.Contains(System.Int32)">
            <summary>
            Checks if the collection contains a listitem with a given id
            </summary>
            <param name="id">Id to check for</param>
            <returns>True if found, false otherwise</returns>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.ISite">
            <summary>
            Public interface to define a Site object of SharePoint Online
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.Id">
            <summary>
            The Unique ID of the Site object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.GroupId">
            <summary>
            The unique ID of the connected Microsoft 365 Group (if any)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.Url">
            <summary>
            The URL of the Site object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.Classification">
            <summary>
            The Classification of the Site object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.SocialBarOnSitePagesDisabled">
            <summary>
            Defines whether social bar is disabled on Site Pages in this site collection
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.SearchBoxInNavBar">
            <summary>
            Define if the suitebar search box should show or not 
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.SearchCenterUrl">
            <summary>
            Defines the Search Center URL
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.RootWeb">
            <summary>
            The RootWeb of the Site object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.AllWebs">
            <summary>
            Collection of sub-webs in the current Site object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.ISite.Features">
            <summary>
            Collection of features enabled for the site
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IWeb">
            <summary>
            Public interface to define a Web object of SharePoint Online
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.Id">
            <summary>
            The Unique ID of the Web object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.NoCrawl">
            <summary>
            Defines whether the site has to be crawled or not
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.RequestAccessEmail">
            <summary>
            The email address to which any access request will be sent
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.WelcomePage">
            <summary>
            Defines the Welcome Page (Home Page) of the site to which the Provisioning Template is applied.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.Title">
            <summary>
            The Title of the Site, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.Description">
            <summary>
            The Description of the Site, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.SiteLogo">
            <summary>
            The SiteLogo of the Site, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.AlternateCSS">
            <summary>
            The AlternateCSS of the Site, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.MasterPageUrl">
            <summary>
            The MasterPage Url of the Site, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.CustomMasterPageUrl">
            <summary>
            The Custom MasterPage Url of the Site, optional attribute.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.CommentsOnSitePagesDisabled">
            <summary>
            Defines whether the comments on site pages are disabled or not
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.QuickLaunchEnabled">
            <summary>
            Enables or disables the QuickLaunch for the site
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.IsMultilingual">
            <summary>
            Defines whether to enable Multilingual capabilities for the current web
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.OverwriteTranslationsOnChange">
            <summary>
            Defines whether to OverwriteTranslationsOnChange on change for the current web
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.ExcludeFromOfflineClient">
            <summary>
            Defines whether to exclude the web from offline client
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.MembersCanShare">
            <summary>
            Defines whether members can share content from the current web
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.DisableFlows">
            <summary>
            Defines whether disable flows for the current web
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.DisableAppViews">
            <summary>
            Defines whether disable PowerApps for the current web
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.HorizontalQuickLaunch">
            <summary>
            Defines whether to enable the Horizontal QuickLaunch for the current web
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.SearchScope">
            <summary>
            Defines the SearchScope for the site
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.SearchBoxInNavBar">
            <summary>
            Define if the suitebar search box should show or not 
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.SearchCenterUrl">
            <summary>
            Defines the Search Center URL
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.Url">
            <summary>
            The URL of the Web object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.Lists">
            <summary>
            Collection of lists in the current Web object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.ContentTypes">
            <summary>
            Collection of content types in the current Web object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.Fields">
            <summary>
            Collection of fields in the current Web object
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.Webs">
            <summary>
            Collection of webs in this current web
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IWeb.Features">
            <summary>
            Collection of features enabled for the web
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IWebCollection">
            <summary>
            Public interface to define a collection of Web objects of SharePoint Online
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.RenderListDataOptions">
            <summary>
            Options to configure the rendering of list data via the RenderListDataAsStream method of IList
            See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#renderlistdataasstream-body-parameter-properties
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.AddRequiredFields">
            <summary>
            Specifies if required fields should be returned or not
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.AllowMultipleValueFilterForTaxonomyFields">
            <summary>
            Specifies if multi value filtering is allowed for taxonomy fields or not
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.DatesInUtc">
            <summary>
            Specifies if we return DateTime field in UTC or local time
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.ExpandGroups">
            <summary>
            Specifies if the grouping should be expanded or not
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.FirstGroupOnly">
            <summary>
            Specifies if only the first group should be returned or not (regardless of view schema)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.FolderServerRelativeUrl">
            <summary>
            Specifies the url to the folder from which to return items
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.ImageFieldsToTryRewriteToCdnUrls">
            <summary>
            Comma-separated list of field names whose values should be rewritten to CDN URLs
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.OverrideViewXml">
            <summary>
            Specifies the override XML to be combined with the View CAML. Applies only to the Query/Where part of the View CAML
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.Paging">
            <summary>
            Specifies the paging information
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.ReplaceGroup">
            <summary>
            Specifies if the grouping should be replaced or not to deal with GroupBy throttling
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.RenderOptions">
            <summary>
            Specifies the type of output to return
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.RenderListDataOptions.ViewXml">
            <summary>
            Specifies the CAML view XML
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IFeature">
            <summary>
            Represents a Feature in SharePoint Online
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFeature.DefinitionId">
            <summary>
            The ID of the Feature
            </summary>
        </member>
        <member name="P:PnP.Core.Model.SharePoint.IFeature.DisplayName">
            <summary>
            The name of the feature
            </summary>
        </member>
        <member name="T:PnP.Core.Model.SharePoint.IFeatureCollection">
            <summary>
            Collection of site or web scoped features
            </summary>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFeatureCollection.EnableAsync(System.Guid)">
            <summary>
            Enable a feature
            </summary>
            <param name="id">Id of the feature to enable</param>
            <returns>Enabled feature</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFeatureCollection.EnableBatchAsync(System.Guid)">
            <summary>
            Enable a feature in batch
            </summary>
            <param name="id">Id of the feature to enable</param>
            <returns>Enabled feature</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFeatureCollection.EnableBatchAsync(PnP.Core.Services.Batch,System.Guid)">
            <summary>
            Enable a feature in batch
            </summary>
            <param name="id">Id of the feature to enable</param>
            <param name="batch"><see cref="T:PnP.Core.Services.Batch"/> to add this feature enable request to</param>
            <returns>Enabled feature</returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFeatureCollection.DisableAsync(System.Guid)">
            <summary>
            Disable a feature
            </summary>
            <param name="id">Id of the feature to disable</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFeatureCollection.DisableBatchAsync(System.Guid)">
            <summary>
            Disable a feature in batch
            </summary>
            <param name="id">Id of the feature to disable</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.SharePoint.IFeatureCollection.DisableBatchAsync(PnP.Core.Services.Batch,System.Guid)">
            <summary>
            Disable a feature in batch
            </summary>
            <param name="id">Id of the feature to disable</param>
            <param name="batch"><see cref="T:PnP.Core.Services.Batch"/> to add this feature disable request to</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelCollection.AddAsync(System.String,System.String)">
            <summary>
            Adds a new channel
            </summary>
            <param name="name">Display name of the channel</param>
            <param name="description">Optional description of the channel</param>
            <returns>Newly added channel</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelCollection.AddBatchAsync(PnP.Core.Services.Batch,System.String,System.String)">
            <summary>
            Adds a new channel
            </summary>
            <param name="batch">Batch to use</param>
            <param name="name">Display name of the channel</param>
            <param name="description">Optional description of the channel</param>
            <returns>Newly added channel</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelCollection.AddBatchAsync(System.String,System.String)">
            <summary>
            Adds a new channel
            </summary>
            <param name="name">Display name of the channel</param>
            <param name="description">Optional description of the channel</param>
            <returns>Newly added channel</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelTabCollection.AddWikiTabAsync(System.String)">
            <summary>
            Adds a new channel tab
            </summary>
            <param name="name">Display name of the channel tab</param>
            <returns>Newly added channel tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelTabCollection.AddWikiTabBatchAsync(PnP.Core.Services.Batch,System.String)">
            <summary>
            Adds a new channel tab
            </summary>
            <param name="batch">Batch to use</param>
            <param name="name">Display name of the channel tab</param>
            <returns>Newly added channel tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelTabCollection.AddWikiTabBatchAsync(System.String)">
            <summary>
            Adds a new channel tab
            </summary>
            <param name="name">Display name of the channel tab</param>
            <returns>Newly added channel tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelTabCollection.AddDocumentLibraryTabAsync(System.String,System.Uri)">
            <summary>
            Adds a new DocumentLibrary tab
            </summary>
            <param name="name">Display name of the  DocumentLibrary tab</param>
            <param name="documentLibraryUri">Uri to the document library that needs to be added as tab</param>
            <returns>Newly added DocumentLibrary tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelTabCollection.AddDocumentLibraryTabBatchAsync(PnP.Core.Services.Batch,System.String,System.Uri)">
            <summary>
            Adds a new DocumentLibrary tab
            </summary>
            <param name="batch">Batch to use</param>
            <param name="name">Display name of the DocumentLibrary tab</param>
            <param name="documentLibraryUri">Uri to the document library that needs to be added as tab</param>
            <returns>Newly added DocumentLibrary tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelTabCollection.AddDocumentLibraryTabBatchAsync(System.String,System.Uri)">
            <summary>
            Adds a new DocumentLibrary tab
            </summary>
            <param name="name">Display name of the DocumentLibrary tab</param>
            <param name="documentLibraryUri">Uri to the document library that needs to be added as tab</param>
            <returns>Newly added DocumentLibrary tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelTabCollection.CreateTeamChannelDocumentLibraryTab(System.String,System.Uri)">
            <summary>
            Creates a wiki <see cref="T:PnP.Core.Model.Teams.TeamChannelTab"/>
            </summary>
            <param name="displayName">Name of the tab</param>
            <returns>Wiki <see cref="T:PnP.Core.Model.Teams.TeamChannelTab"/></returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelTabCollection.CreateTeamChannelWikiTab(System.String)">
            <summary>
            Creates a wiki <see cref="T:PnP.Core.Model.Teams.TeamChannelTab"/>
            </summary>
            <param name="displayName">Name of the tab</param>
            <returns>Wiki <see cref="T:PnP.Core.Model.Teams.TeamChannelTab"/></returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChannelTabCollection.CreateTeamChannelTab(System.String)">
            <summary>
            Base tab creation logic
            </summary>
            <param name="displayName">Name of the tab</param>
            <returns>Initial <see cref="T:PnP.Core.Model.Teams.TeamChannelTab"/> instance</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChatMessageCollection.AddAsync(System.String)">
            <summary>
            Adds a new channel chat message
            </summary>
            <param name="name">Body of the chat message</param>
            <returns>Newly added channel chat message</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChatMessageCollection.AddBatchAsync(PnP.Core.Services.Batch,System.String)">
            <summary>
            Adds a new channel chat message
            </summary>
            <param name="batch">Batch to use</param>
            <param name="name">Body of the chat message</param>
            <returns>Newly added channel chat message</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.TeamChatMessageCollection.AddBatchAsync(System.String)">
            <summary>
            Adds a new channel chat message
            </summary>
            <param name="name">Body of the chat message</param>
            <returns>Newly added channel chat message</returns>
        </member>
        <member name="T:PnP.Core.Model.Teams.ChatMessageContentType">
            <summary>
            Chat message content types
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ChatMessageImportance">
            <summary>
            The importance of the chat message.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ChatMessageType">
            <summary>
            Types of chat messages
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.TeamSpecialization">
            <summary>
            Defines the Specialization options for a Team
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.TeamVisibility">
            <summary>
            Defines the Visibility for a Team
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeam">
            <summary>
            Public interface to define a Team object of Microsoft Teams
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.Id">
            <summary>
            The Unique ID of the Team/Group
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.DisplayName">
            <summary>
            The display name of the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.Description">
            <summary>
            The description of the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.InternalId">
            <summary>
            The Internal ID of the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.Classification">
            <summary>
            The classification of the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.Specialization">
            <summary>
            The specialization of the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.Visibility">
            <summary>
            The specialization of the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.WebUrl">
            <summary>
            The Web URL of the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.IsArchived">
            <summary>
            Defines whether the Team is archived or not
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.MemberSettings">
            <summary>
            Defines the Members Settings for the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.GuestSettings">
            <summary>
            Defines the Guest Settings for the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.MessagingSettings">
            <summary>
            Defines the Members Settings for the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.FunSettings">
            <summary>
            Defines the Members Settings for the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.DiscoverySettings">
            <summary>
            Defines the Members Settings for the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.ClassSettings">
            <summary>
            Defines the Class Settings for the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.PrimaryChannel">
            <summary>
            Reference to the Primary Channel for the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.Channels">
            <summary>
            Collection of channels in this current Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.InstalledApps">
            <summary>
            Collection of installed apps in this current Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.Owners">
            <summary>
            Collection of Owners of the current Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeam.Members">
            <summary>
            Collection of Members of the current Team
            </summary>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeam.ArchiveAsync">
            <summary>
            Archives the team
            </summary>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeam.ArchiveAsync(System.Boolean)">
            <summary>
            Archives the team
            </summary>
            <param name="setSPOSiteReadOnlyForMembers">This optional parameter defines whether to set permissions for team members to read-only on the Sharepoint Online site associated with the team</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeam.UnarchiveAsync">
            <summary>
            Unarchives the team
            </summary>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamApp">
            <summary>
            Defines a Microsoft Teams App installation
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamApp.Id">
            <summary>
            The unique Id of the Team App in the current app catalog
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamApp.ExternalId">
            <summary>
            The external ID of the Team App as defined by the developer
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamApp.DisplayName">
            <summary>
            The Display Name of the Team App
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamApp.DistributionMethod">
            <summary>
            The method of distribution for the Team App
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.TeamsAppDistributionMethod">
            <summary>
            Distribution method of the team app
            </summary>
        </member>
        <member name="F:PnP.Core.Model.Teams.TeamsAppDistributionMethod.Store">
            <summary>
            From store
            </summary>
        </member>
        <member name="F:PnP.Core.Model.Teams.TeamsAppDistributionMethod.Organization">
            <summary>
            From your organization
            </summary>
        </member>
        <member name="F:PnP.Core.Model.Teams.TeamsAppDistributionMethod.Sideloaded">
            <summary>
            Side loaded (developer scenario)
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamAppCollection">
            <summary>
            Public interface to define a collection of TeamApp objects of Microsoft Teams
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamAsyncOperation">
            <summary>
            Represents a Microsoft Teams async operation
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamAsyncOperation.Location">
            <summary>
            Location to call to request the current status of an async operation
            </summary>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamAsyncOperation.WaitForCompletionAsync">
            <summary>
            Waits for the async operation to finish
            </summary>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChannel">
            <summary>
            Defines a Channel of Microsoft Teams
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannel.Id">
            <summary>
            The Unique ID of the Team Channel
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannel.DisplayName">
            <summary>
            The display name of the Team Channel
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannel.Description">
            <summary>
            The description of the Team Channel
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannel.IsFavoriteByDefault">
            <summary>
            Defines whether the Team Channel is favorite by default in the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannel.Email">
            <summary>
            The email address of the Team Channel
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannel.MembershipType">
            <summary>
            Defines the Membership type for the Team Channel
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannel.WebUrl">
            <summary>
            The Web URL of the Team Channel
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannel.Tabs">
            <summary>
            Tabs in this Channel
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannel.Messages">
            <summary>
            Messages in this Team Channel
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.TeamChannelMembershipType">
            <summary>
            Defines the Membership Type for a Team Channel
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChannelCollection">
            <summary>
            Public interface to define a collection of Team Channels
            </summary>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChannelCollection.AddAsync(System.String,System.String)">
            <summary>
            Adds a new channel
            </summary>
            <param name="name">Display name of the channel</param>
            <param name="description">Optional description of the channel</param>
            <returns>Newly added channel</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChannelCollection.AddBatchAsync(PnP.Core.Services.Batch,System.String,System.String)">
            <summary>
            Adds a new channel
            </summary>
            <param name="batch">Batch to use</param>
            <param name="name">Display name of the channel</param>
            <param name="description">Optional description of the channel</param>
            <returns>Newly added channel</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChannelCollection.AddBatchAsync(System.String,System.String)">
            <summary>
            Adds a new channel
            </summary>
            <param name="name">Display name of the channel</param>
            <param name="description">Optional description of the channel</param>
            <returns>Newly added channel</returns>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChannelTab">
            <summary>
            Defines the tab in a Team channel
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTab.Id">
            <summary>
            Identifier that uniquely identifies a specific instance of a channel tab. Read only.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTab.DisplayName">
            <summary>
            Name of the tab.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTab.SortOrderIndex">
            <summary>
            Index of the order used for sorting tabs.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTab.WebUrl">
            <summary>
            Deep link url of the tab instance. Read only.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTab.Configuration">
            <summary>
            Container for custom settings applied to a tab. The tab is considered configured only once this property is set.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTab.TeamsApp">
            <summary>
            The application that is linked to the tab. This cannot be changed after tab creation.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChannelTabCollection">
            <summary>
            Public interface to define a collection of Tabs for a Team Channel
            </summary>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChannelTabCollection.AddWikiTabAsync(System.String)">
            <summary>
            Adds a new wiki channel tab
            </summary>
            <param name="name">Display name of the wiki channel tab</param>
            <returns>Newly added wiki channel tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChannelTabCollection.AddWikiTabBatchAsync(PnP.Core.Services.Batch,System.String)">
            <summary>
            Adds a new wiki channel tab
            </summary>
            <param name="batch">Batch to use</param>
            <param name="name">Display name of the wiki channel tab</param>
            <returns>Newly added wiki channel tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChannelTabCollection.AddWikiTabBatchAsync(System.String)">
            <summary>
            Adds a new wiki channel tab
            </summary>
            <param name="name">Display name of the wiki channel tab</param>
            <returns>Newly added wiki channel tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChannelTabCollection.AddDocumentLibraryTabAsync(System.String,System.Uri)">
            <summary>
            Adds a new DocumentLibrary channel tab
            </summary>
            <param name="name">Display name of the DocumentLibrary channel tab</param>
            <param name="documentLibraryUri">Uri to the document library that needs to be added as tab</param>
            <returns>Newly added DocumentLibrary channel tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChannelTabCollection.AddDocumentLibraryTabBatchAsync(PnP.Core.Services.Batch,System.String,System.Uri)">
            <summary>
            Adds a new DocumentLibrary channel tab
            </summary>
            <param name="batch">Batch to use</param>
            <param name="name">Display name of the DocumentLibrary channel tab</param>
            <param name="documentLibraryUri">Uri to the document library that needs to be added as tab</param>
            <returns>Newly added DocumentLibrary channel tab</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChannelTabCollection.AddDocumentLibraryTabBatchAsync(System.String,System.Uri)">
            <summary>
            Adds a new DocumentLibrary channel tab
            </summary>
            <param name="name">Display name of the DocumentLibrary channel tab</param>
            <param name="documentLibraryUri">Uri to the document library that needs to be added as tab</param>
            <returns>Newly added DocumentLibrary channel tab</returns>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChannelTabConfiguration">
            <summary>
            Public interface to define the configuration settings for a Team tab
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTabConfiguration.EntityId">
            <summary>
            Identifier for the entity hosted by the tab provider.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTabConfiguration.ContentUrl">
            <summary>
            Url used for rendering tab contents in Teams. Required.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTabConfiguration.RemoveUrl">
            <summary>
            Url called by Teams client when a Tab is removed using the Teams Client.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTabConfiguration.WebsiteUrl">
            <summary>
            Url for showing tab contents outside of Teams.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTabConfiguration.HasContent">
            <summary>
            Is there content in this tab.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTabConfiguration.WikiTabId">
            <summary>
            Wiki tab id.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChannelTabConfiguration.WikiDefaultTab">
            <summary>
            Is this the default wiki tab.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChatMessage">
            <summary>
            Represents an individual chat message within a channel or chat. The chat message can be a root chat message or 
            part of a reply thread that is defined by the replyToId property in the chat message.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Id">
            <summary>
            Read-only. Unique Id of the message.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.ReplyToId">
            <summary>
            Read-only. Id of the parent chat message or root chat message of the thread. (Only applies to chat messages in channels not chats)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.From">
            <summary>
            Read only. Details of the sender of the chat message.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Etag">
            <summary>
            Read-only. Version number of the chat message.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.MessageType">
            <summary>
            The type of chat message. The possible values are: message.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.CreatedDateTime">
            <summary>
            Read only. Timestamp of when the chat message was created.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.LastModifiedDateTime">
            <summary>
            Read only. Timestamp of when the chat message is created or edited, including when a reply is made (if it's a root chat message in a channel) or a reaction is added or removed.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.DeletedDateTime">
            <summary>
            Read only. Timestamp at which the chat message was deleted, or null if not deleted.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Subject">
            <summary>
            The subject of the chat message, in plaintext.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Body">
            <summary>
            Plaintext/HTML representation of the content of the chat message. Representation is specified by the contentType inside the body. 
            The content is always in HTML if the chat message contains a chatMessageMention.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Summary">
            <summary>
            Summary text of the chat message that could be used for push notifications and summary views or fall back views. 
            Only applies to channel chat messages, not chat messages in a chat.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Importance">
            <summary>
            The importance of the chat message.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.WebUrl">
            <summary>
            The Web URL of the team chat message
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Locale">
            <summary>
            Locale of the team chat message
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Reactions">
            <summary>
            Reactions for this chat message (for example, Like).
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Mentions">
            <summary>
            List of entities mentioned in the chat message. Currently supports user, bot, team, channel.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessage.Attachments">
            <summary>
            Attached files. Attachments are currently read-only – sending attachments is not supported.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChatMessageAttachment">
            <summary>
            Attachments connected to a chat message
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageAttachment.Id">
            <summary>
            Read-only. Unique id of the attachment.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageAttachment.ContentType">
            <summary>
            The media type of the content attachment.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageAttachment.ContentUrl">
            <summary>
            URL for the content of the attachment. Supported protocols: http, https, file and data.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageAttachment.Content">
            <summary>
            The content of the attachment. If the attachment is a rich card, set the property to the rich card object. 
            This property and contentUrl are mutually exclusive.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageAttachment.Name">
            <summary>
            Name of the attachment.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageAttachment.ThumbnailUrl">
            <summary>
            URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. 
            For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might 
            include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. 
            When the user clicks the image, the channel would open the document.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChatMessageCollection">
            <summary>
            A chat is a collection of chatMessages between one or more participants. Participants can be users or apps.
            </summary>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChatMessageCollection.AddAsync(System.String)">
            <summary>
            Adds a new channel chat message
            </summary>
            <param name="name">Body of the chat message</param>
            <returns>Newly added channel chat message</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChatMessageCollection.AddBatchAsync(PnP.Core.Services.Batch,System.String)">
            <summary>
            Adds a new channel chat message
            </summary>
            <param name="batch">Batch to use</param>
            <param name="name">Body of the chat message</param>
            <returns>Newly added channel chat message</returns>
        </member>
        <member name="M:PnP.Core.Model.Teams.ITeamChatMessageCollection.AddBatchAsync(System.String)">
            <summary>
            Adds a new channel chat message
            </summary>
            <param name="name">Body of the chat message</param>
            <returns>Newly added channel chat message</returns>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChatMessageContent">
            <summary>
            Public interface to define the content of a chat message
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageContent.Content">
            <summary>
            The content of the item.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageContent.ContentType">
            <summary>
            The type of the content. Possible values are text and html.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChatMessageMention">
            <summary>
            Represents a mention in a chatMessage entity. The mention can be to a user, team, bot, or channel.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageMention.Id">
            <summary>
            Index of an entity being mentioned in the specified chatMessage. 
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageMention.MentionText">
            <summary>
            String used to represent the mention. For example, a user's display name, a team name.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageMention.Mentioned">
            <summary>
            The entity (user, application, team, or channel) that was mentioned. If it was a channel or team that was @mentioned, 
            the identitySet contains a conversation property giving the ID of the team/channel, and a conversationIdentityType 
            property that represents either the team or channel.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamChatMessageReaction">
            <summary>
            Represents a reaction to a chatMessage entity.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageReaction.CreatedDateTime">
            <summary>
            The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. 
            For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageReaction.ReactionType">
            <summary>
            Type of reaction
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamChatMessageReaction.User">
            <summary>
            The user who reacted to the message.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamClassSettings">
            <summary>
            Public interface to define the settings for a classroom
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamDiscoverySettings">
            <summary>
            Public interface to define the discovery settings for a Team
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamFunSettings">
            <summary>
            Public interface to define the fun settings for a Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamFunSettings.AllowGiphy">
            <summary>
            Defines whether the Giphy are allowed in the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamFunSettings.GiphyContentRating">
            <summary>
            Defines the Giphy content rating (strict or moderate)
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamFunSettings.AllowStickersAndMemes">
            <summary>
            Defines whether the stickers and meme are allowed in the Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamFunSettings.AllowCustomMemes">
            <summary>
            Defines whether the custom memes are allowed in the Team
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.TeamGiphyContentRating">
            <summary>
            Giphy content rating for giphies being used in a team
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamGuestSettings">
            <summary>
            Public interface to define the guest settings for a Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamGuestSettings.AllowCreateUpdateChannels">
            <summary>
            Defines whether the guests can create or update channels
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamGuestSettings.AllowDeleteChannels">
            <summary>
            Defines whether the guests can delete channels
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamIdentitySet">
            <summary>
            Identity information about a Teams element
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamIdentitySet.Application">
            <summary>
            Optional. The application associated with this action.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamIdentitySet.Conversation">
            <summary>
            Optional. The team or channel associated with this action.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamIdentitySet.ConversationIdentityType">
            <summary>
            Optional. Indicates whether the conversation property identifies a team or channel.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamIdentitySet.Device">
            <summary>
            Optional. The device associated with this action.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamIdentitySet.Phone">
            <summary>
            Optional. The phone number associated with this action.
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamIdentitySet.User">
            <summary>
            Optional. The user associated with this action.
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamMembersSettings">
            <summary>
            Public interface to define the memebers settings for a Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMembersSettings.AllowCreateUpdateChannels">
            <summary>
            Defines whether the team members can update channels
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMembersSettings.AllowCreatePrivateChannels">
            <summary>
            Defines whether the team members can create private channels
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMembersSettings.AllowDeleteChannels">
            <summary>
            Defines whether the team members can delete channels
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMembersSettings.AllowAddRemoveApps">
            <summary>
            Defines whether the team members can add or remove apps
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMembersSettings.AllowCreateUpdateRemoveTabs">
            <summary>
            Defines whether the team members can update or remove tabs
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMembersSettings.AllowCreateUpdateRemoveConnectors">
            <summary>
            Defines whether the team members can create, update, or remove connectors
            </summary>
        </member>
        <member name="T:PnP.Core.Model.Teams.ITeamMessagingSettings">
            <summary>
            Public interface to define the messaging settings for a Team
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMessagingSettings.AllowUserEditMessages">
            <summary>
            Defines whether users can edit messages
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMessagingSettings.AllowUserDeleteMessages">
            <summary>
            Defines whether users can delete messages
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMessagingSettings.AllowOwnerDeleteMessages">
            <summary>
            Defines whether owners can delete messages
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMessagingSettings.AllowTeamMentions">
            <summary>
            Defines whether users can use team mentions
            </summary>
        </member>
        <member name="P:PnP.Core.Model.Teams.ITeamMessagingSettings.AllowChannelMentions">
            <summary>
            Defines whether users can use channel mentions
            </summary>
        </member>
        <member name="T:PnP.Core.PnPConstants">
            <summary>
            Support class to provide all the constants for the engine
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.MicrosoftGraphBaseUrl">
            <summary>
            The string base URL of the Microsoft Graph
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.MicrosoftGraphBaseUri">
            <summary>
            The base URI of the Microsoft Graph
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.GraphV1Endpoint">
            <summary>
            Graph v1 endpoint
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.GraphBetaEndpoint">
            <summary>
            Graph beta endpoint 
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.MetaDataUri">
            <summary>
            The name of the URI metadata attribute
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.MetaDataId">
            <summary>
            The name of the ID metadata attribute
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.MetaDataType">
            <summary>
            The name of the Data Type metadata attribute
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.MetaDataEtag">
            <summary>
            The name of the ETag metadata attribute
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.MetaDataGraphId">
            <summary>
            The name of the Microsoft Graph ID metadata attribute
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.MetaDataRestId">
            <summary>
            The name of the REST Id metadata attribute
            </summary>
        </member>
        <member name="F:PnP.Core.PnPConstants.MetaDataRestEntityTypeName">
            <summary>
            The name of the Entity Type Name metadata attribute
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.BaseQueryProvider">
            <summary>
            Base abstract class to implement the basic logic of an IQueryProvider
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.IAsyncQueryProvider">
            <summary>
                <para>
                    Defines method to execute queries asynchronously that are described by an IQueryable object.
                </para>
            </summary>
        </member>
        <member name="M:PnP.Core.QueryModel.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
                Executes the strongly-typed query represented by a specified expression tree asynchronously.
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.QueryableExtensions">
            <summary>
                Asynchronous LINQ related extension methods.
            </summary>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name = "source"/> is <see langword="null" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name = "source"/> contains no elements.
            </exception>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source"/> or <paramref name="predicate"/> is <see langword="null" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>
                    No element satisfies the condition in <paramref name = "predicate" />
                </para>
                <para>
                    -or -
                </para>
                <para>
                    <paramref name="source"/> contains no elements.
                </para>
            </exception>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <see langword="default" /> ( <typeparamref name="TSource" /> ) if
                <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <see langword="default" /> ( <typeparamref name="TSource" /> ) if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the first
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name = "source"/> or <paramref name="predicate"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a list from.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates an array from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create an array from.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains an array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.IgnoreQueryFilters``1(System.Linq.IQueryable{``0})">
            <summary>
                Specifies that the current LINQ query should not have any
                model-level entity query filters applied.
            </summary>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <returns>
                A new query that will not apply any model-level entity query filters.
            </returns>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function and a comparer.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="T">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
            <param name="action"> The action to perform on each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:PnP.Core.QueryModel.QueryableExtensions.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> which can be enumerated asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
            <returns> The query results. </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PnP.Core.QueryModel.Model.BaseQueryableDataModelCollection`1" -->
        <!-- Badly formed XML comment ignored for member "T:PnP.Core.QueryModel.Model.QueryableDataModelCollection`1" -->
        <member name="M:PnP.Core.QueryModel.Model.QueryableDataModelCollection`1.ToString">
            <summary>
            Returns OData query string for the current expression
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.ODataQuery`1">
            <summary>
            Internal class to define an OData query with an in-memory abstract model
            </summary>
            <typeparam name="TModel">Defines the main type targeted by the query</typeparam>
            <remarks>
            We support what is defined here: https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/use-odata-query-operations-in-sharepoint-rest-requests#odata-query-operators-supported-in-the-sharepoint-rest-service
            except the substrinof and startswith functions
            </remarks>
        </member>
        <member name="P:PnP.Core.QueryModel.ODataQuery`1.Top">
            <summary>
            Property corresponding to the $top OData query option
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.ODataQuery`1.Skip">
            <summary>
            Property corresponding to the $skip OData query option
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.ODataQuery`1.Filters">
            <summary>
            Property corresponding to the $filter OData query option
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.ODataQuery`1.OrderBy">
            <summary>
            Property corresponding to the $orderby OData query option
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.ODataQuery`1.Select">
            <summary>
            Property corresponding to the $select OData query option
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.ODataQuery`1.Expand">
            <summary>
            Property corresponding to the $expand OData query option
            </summary>
        </member>
        <member name="M:PnP.Core.QueryModel.ODataQuery`1.ToQueryString(PnP.Core.QueryModel.ODataTargetPlatform,System.Boolean)">
            <summary>
            Converts the in-memory OData query representation into an actual set of querystring OData options
            </summary>
            <param name="targetPlatform">Defines the target platform for the OData query</param>
            <param name="urlEncode">Declares whether to encode URL strings or not</param>
            <returns>The OData querystring for the current query</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.ODataQuery`1.TranslateFieldName(System.String,PnP.Core.QueryModel.ODataTargetPlatform)">
            <summary>
            Private method to translate the query field toward the target platform
            </summary>
            <param name="fieldName"></param>
            <param name="targetPlatform"></param>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.QueryModel.ODataFilter">
            <summary>
            Interface to define the basic functionalities of a filtering item (either a single item or a group of items)
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.ODataFilter.ConcatOperator">
            <summary>
            The concatenation operator between the current filter item and the next one in the chain, within the current filtering group. Default: AND.
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.FilterItem">
            <summary>
            Defines a filtering criteria item
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.FilterItem.Field">
            <summary>
            The name of the field for the filtering criteria
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.FilterItem.Criteria">
            <summary>
            The filtering criteria. Default: Equal.
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.FilterItem.Value">
            <summary>
            The actual value for the filtering criteria
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.FiltersGroup">
            <summary>
            Defines a group of filters
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.OrderByItem">
            <summary>
            Defines a single sorting item
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.OrderByItem.Field">
            <summary>
            The name of the field to sort by
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.OrderByItem.Direction">
            <summary>
            The direction (Ascending/Descending) for the sorting criteria. Default: Ascending.
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.FilteringCriteria">
            <summary>
            Enumeration of filtering criteria for queries
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.FilteringCriteria.Equal">
            <summary>
            Correspondes to the = operator
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.FilteringCriteria.NotEqual">
            <summary>
            Correspondes to the != operator
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.FilteringCriteria.GreaterThan">
            <summary>
            Correspondes to the > operator
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.FilteringCriteria.GreaterThanOrEqual">
            <summary>
            Correspondes to the >= operator
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:PnP.Core.QueryModel.FilteringCriteria.LessThan" -->
        <!-- Badly formed XML comment ignored for member "F:PnP.Core.QueryModel.FilteringCriteria.LessThanOrEqual" -->
        <member name="F:PnP.Core.QueryModel.FilteringCriteria.Not">
            <summary>
            Correspondes to the ! operator
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.FilteringConcatOperator">
            <summary>
            Enumeration of logical concat operators for queries
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.FilteringConcatOperator.AND">
            <summary>
            Logical AND for query items in query groups
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.FilteringConcatOperator.OR">
            <summary>
            Logical OR for query items in query groups
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.OrderByDirection">
            <summary>
            Enumeration of the ordering criteria for sorting results
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.OrderByDirection.Asc">
            <summary>
            Ascending sorting
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.OrderByDirection.Desc">
            <summary>
            Descending sorting
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.ODataTargetPlatform">
            <summary>
            Defines the target platform for the query
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.ODataTargetPlatform.Graph">
            <summary>
            Microsoft Graph (primary choice)
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.ODataTargetPlatform.SPORest">
            <summary>
            Microsoft SharePoint Online REST API (fallback)
            </summary>
        </member>
        <member name="T:PnP.Core.QueryModel.ODataUtilities">
            <summary>
            Utility class
            </summary>
        </member>
        <member name="M:PnP.Core.QueryModel.ODataUtilities.ConvertToString(System.Object)">
            <summary>
            Convert a value to a valid string formatted for OData. String values are quoted and escaped
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.Include``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Extension method to declare the collection properties to expand while querying the REST service
            </summary>
            <typeparam name="TResult">The type of the target entity</typeparam>
            <param name="source">The collection of items to expand properties from</param>
            <param name="selector">A selector for the expandable properties</param>
            <returns>The resulting collection</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.Include``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Extension method to declare the collection properties to expand while querying the REST service
            </summary>
            <typeparam name="TResult">The type of the target entity</typeparam>
            <param name="source">The collection of items to expand properties from</param>
            <param name="selectors">An array of selectors for the expandable properties</param>
            <returns>The resulting collection</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.Load``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Extension method to declare a field/metadata property to load while executing the REST query
            </summary>
            <typeparam name="TResult">The type of the target entity</typeparam>
            <param name="source">The collection of items to load the field/metadata from</param>
            <param name="selector">A selector for a field/metadata</param>
            <returns>The resulting collection</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.Load``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Extension method to declare the fields/metadata properties to load while executing the REST query
            </summary>
            <typeparam name="TResult">The type of the target entity</typeparam>
            <param name="source">The collection of items to load fields/metadata from</param>
            <param name="selectors">An array of selectors for the fields/metadata</param>
            <returns>The resulting collection</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByTitle(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IList},System.String)">
            <summary>
            Extension method to select a list (IList) by title
            </summary>
            <param name="source">The collection of lists to get the list by title from</param>
            <param name="title">The title to search for</param>
            <returns>The resulting list instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByTitle(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IList},System.String,System.Linq.Expressions.Expression{System.Func{PnP.Core.Model.SharePoint.IList,System.Object}}[])">
            <summary>
            Extension method to select a list (IList) by title
            </summary>
            <param name="source">The collection of lists to get the list by title from</param>
            <param name="title">The title to search for</param>
            <param name="selectors">The expressions declaring the fields to select</param>
            <returns>The resulting list instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByTitleAsync(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IList},System.String)">
            <summary>
            Extension method to select a list (IList) by title asynchronously
            </summary>
            <param name="source">The collection of lists to get the list by title from</param>
            <param name="title">The title to search for</param>
            <returns>The resulting list instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByTitleAsync(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IList},System.String,System.Linq.Expressions.Expression{System.Func{PnP.Core.Model.SharePoint.IList,System.Object}}[])">
            <summary>
            Extension method to select a list (IList) by title asynchronously
            </summary>
            <param name="source">The collection of lists to get the list by title from</param>
            <param name="title">The title to search for</param>
            <param name="selectors">The expressions declaring the fields to select</param>
            <returns>The resulting list instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetById(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IList},System.Guid)">
            <summary>
            Extension method to select a list (IList) by id
            </summary>
            <param name="source">The collection of lists to get the list by title from</param>
            <param name="id">The id to search for</param>
            <returns>The resulting list instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetById(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IList},System.Guid,System.Linq.Expressions.Expression{System.Func{PnP.Core.Model.SharePoint.IList,System.Object}}[])">
            <summary>
            Extension method to select a list (IList) by id
            </summary>
            <param name="source">The collection of lists to get the list by title from</param>
            <param name="id">The id to search for</param>
            <param name="selectors">The expressions declaring the fields to select</param>
            <returns>The resulting list instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByIdAsync(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IList},System.Guid)">
            <summary>
            Extension method to select a list (IList) by id
            </summary>
            <param name="source">The collection of lists to get the list by title from</param>
            <param name="id">The id to search for</param>
            <returns>The resulting list instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByIdAsync(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IList},System.Guid,System.Linq.Expressions.Expression{System.Func{PnP.Core.Model.SharePoint.IList,System.Object}}[])">
            <summary>
            Extension method to select a list (IList) by id
            </summary>
            <param name="source">The collection of lists to get the list by title from</param>
            <param name="id">The id to search for</param>
            <param name="selectors">The expressions declaring the fields to select</param>
            <returns>The resulting list instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetById(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IListItem},System.Int32)">
            <summary>
            Extension method to select a list item (IListItem) by Id
            </summary>
            <param name="source">The collection of lists items to get the item by Id from</param>
            <param name="id">The Id to search for</param>
            <returns>The resulting list item instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetById(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IListItem},System.Int32,System.Linq.Expressions.Expression{System.Func{PnP.Core.Model.SharePoint.IListItem,System.Object}}[])">
            <summary>
            Extension method to select a list item (IListItem) by Id
            </summary>
            <param name="source">The collection of lists items to get the item by Id from</param>
            <param name="id">The Id to search for</param>
            <param name="selectors">The expressions declaring the fields to select</param>
            <returns>The resulting list item instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByIdAsync(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IListItem},System.Int32)">
            <summary>
            Extension method to select a list item (IListItem) by Id asynchronously
            </summary>
            <param name="source">The collection of lists items to get the item by Id from</param>
            <param name="id">The Id to search for</param>
            <returns>The resulting list item instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByIdAsync(System.Linq.IQueryable{PnP.Core.Model.SharePoint.IListItem},System.Int32,System.Linq.Expressions.Expression{System.Func{PnP.Core.Model.SharePoint.IListItem,System.Object}}[])">
            <summary>
            Extension method to select a list item (IListItem) by Id asynchronously
            </summary>
            <param name="source">The collection of lists items to get the item by Id from</param>
            <param name="id">The Id to search for</param>
            <param name="selectors">The expressions declaring the fields to select</param>
            <returns>The resulting list item instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByDisplayName(System.Linq.IQueryable{PnP.Core.Model.Teams.ITeamChannel},System.String)">
            <summary>
            Extension method to select a channel (ITeamChannel) by displayName
            </summary>
            <param name="source">The collection of channels to get the channel by displayName from</param>
            <param name="displayName">The displayName to search for</param>
            <returns>The resulting channel instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByDisplayName(System.Linq.IQueryable{PnP.Core.Model.Teams.ITeamChannel},System.String,System.Linq.Expressions.Expression{System.Func{PnP.Core.Model.Teams.ITeamChannel,System.Object}}[])">
            <summary>
            Extension method to select a channel (ITeamChannel) by displayName
            </summary>
            <param name="source">The collection of channels to get the channel by displayName from</param>
            <param name="displayName">The displayName to search for</param>
            <param name="selectors">The expressions declaring the fields to select</param>
            <returns>The resulting channel instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByDisplayNameAsync(System.Linq.IQueryable{PnP.Core.Model.Teams.ITeamChannel},System.String)">
            <summary>
            Extension method to select a channel (ITeamChannel) by displayName asynchronously
            </summary>
            <param name="source">The collection of channels to get the channel by displayName from</param>
            <param name="displayName">The displayName to search for</param>
            <returns>The resulting channel instance, if any</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.BaseDataModelExtensions.GetByDisplayNameAsync(System.Linq.IQueryable{PnP.Core.Model.Teams.ITeamChannel},System.String,System.Linq.Expressions.Expression{System.Func{PnP.Core.Model.Teams.ITeamChannel,System.Object}}[])">
            <summary>
            Extension method to select a channel (ITeamChannel) by displayName asynchronously
            </summary>
            <param name="source">The collection of channels to get the channel by displayName from</param>
            <param name="displayName">The displayName to search for</param>
            <param name="selectors">The expressions declaring the fields to select</param>
            <returns>The resulting channel instance, if any</returns>
        </member>
        <member name="T:PnP.Core.QueryModel.DataModelQueryProvider`1">
            <summary>
            Concrete implementation of an IQueryProvider for the Domain Model
            </summary>
            <typeparam name="TModel">The Type of the Domain Model object that the IQueryProvider supports</typeparam>
        </member>
        <member name="F:PnP.Core.QueryModel.DataModelQueryProvider`1.queryService">
            <summary>
            The internal Query Service used to execute the actual queries
            </summary>
        </member>
        <member name="M:PnP.Core.QueryModel.DataModelQueryProvider`1.#ctor(PnP.Core.QueryModel.DataModelQueryService{`0})">
            <summary>
            Creates a new instance of the IQueryProvider based on an external Query Service
            </summary>
            <param name="queryService"></param>
        </member>
        <member name="M:PnP.Core.QueryModel.DataModelQueryProvider`1.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Internal method to execute the translation of the query expression 
            into an actual query text for the target Query Service
            </summary>
            <param name="expression">The expression to translate</param>
            <returns>The expression translated into the actual query text for the target Query Service</returns>
        </member>
        <member name="M:PnP.Core.QueryModel.DataModelQueryService`1.#ctor">
            <summary>
            Protected default constructor, to force creation using
            the PnPContext instance
            </summary>
        </member>
        <member name="M:PnP.Core.QueryModel.DataModelQueryService`1.#ctor(PnP.Core.Services.PnPContext,PnP.Core.Model.IDataModelParent,System.String)">
            <summary>
            Constructor based on a PnPContext instance
            </summary>
            <param name="context">The PnPContext instance to use for executing the queries</param>
            <param name="parent">The parent Domain Model object for the current query</param>
            <param name="memberName">Optional name of the member behind this query service</param>
        </member>
        <member name="T:PnP.Core.QueryModel.FunctionMapping">
            <summary>
            Contains the mapping from methods/members to OData functions
            </summary>
        </member>
        <member name="F:PnP.Core.QueryModel.FunctionMapping.DefinedFunctions">
            <summary>
            List of supported functions
            </summary>
        </member>
        <member name="P:PnP.Core.QueryModel.FunctionMapping.SupportedMembers">
            <summary>
            Returns the list of supported methods and properties
            </summary>
        </member>
        <member name="M:PnP.Core.QueryModel.FunctionMapping.TryMapMember(System.Reflection.MemberInfo,System.String,System.Object[],System.String@)">
            <summary>
            Tries to map a member (method/property) and gets the OData formatted function
            </summary>
            <param name="member">The member to map</param>
            <param name="source">The source field name</param>
            <param name="arguments">The arguments used for method invocation</param>
            <param name="functionCall">The OData function call</param>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.Services.AuthenticationProviderFactory">
            <summary>
            Public factory service to create IAuthenticationProvider object instances
            </summary>
        </member>
        <member name="M:PnP.Core.Services.AuthenticationProviderFactory.CreateDefault">
            <summary>
            Creates the default instance of IAuthenticationProvider based on the configuration
            </summary>
            <returns>An object that implements IAuthenticationProvider based on the configuration</returns>
        </member>
        <member name="M:PnP.Core.Services.AuthenticationProviderFactory.Create(System.String)">
            <summary>
            Creates a new instance of IAuthenticationProvider based on a provided configuration name
            </summary>
            <param name="name">The name of the IAuthenticationProvider configuration to use</param>
            <returns>An object that implements IAuthenticationProvider based on the provided configuration name</returns>
        </member>
        <member name="T:PnP.Core.Services.AuthenticationProviderFactoryCollectionExtensions">
            <summary>
            Extension class for the IServiceCollection type to provide supporting methods for the AuthenticationProviderFactory service
            </summary>
        </member>
        <member name="T:PnP.Core.Services.IAuthenticationProvider">
            <summary>
            Defines the public interface that any Authentication Provider must implement
            </summary>
        </member>
        <member name="P:PnP.Core.Services.IAuthenticationProvider.Configuration">
            <summary>
            Get's the in use <see cref="T:PnP.Core.Services.IAuthenticationProviderConfiguration"/>
            </summary>
        </member>
        <member name="M:PnP.Core.Services.IAuthenticationProvider.Configure(PnP.Core.Services.IAuthenticationProviderConfiguration)">
            <summary>
            Configures the Authentication Provider
            </summary>
            <param name="configuration">The configuration to use</param>
        </member>
        <member name="M:PnP.Core.Services.IAuthenticationProvider.AuthenticateRequestAsync(System.Uri,System.Net.Http.HttpRequestMessage)">
            <summary>
            Authenticates the specified request message.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to authenticate.</param>
            <returns>The task to await.</returns>
        </member>
        <member name="M:PnP.Core.Services.IAuthenticationProvider.GetAccessTokenAsync(System.Uri,System.String[])">
            <summary>
            Get's an access token for the requested resource and scope
            </summary>
            <param name="resource">Resource to request an access token for</param>
            <param name="scopes">Scopes to request</param>
            <returns>An access token</returns>
        </member>
        <member name="M:PnP.Core.Services.IAuthenticationProvider.GetAccessTokenAsync(System.Uri)">
            <summary>
            Get's an access token for the requested resource 
            </summary>
            <param name="resource">Resource to request an access token for</param>
            <returns>An access token</returns>
        </member>
        <member name="T:PnP.Core.Services.IAuthenticationProviderConfiguration">
            <summary>
            Basic interface for all the Authentication Provider configurations
            </summary>
        </member>
        <member name="P:PnP.Core.Services.IAuthenticationProviderConfiguration.Name">
            <summary>
            The Name of the configuration
            </summary>
        </member>
        <member name="P:PnP.Core.Services.IAuthenticationProviderConfiguration.ClientId">
            <summary>
            The ClientId of the application to use for authentication
            </summary>
        </member>
        <member name="P:PnP.Core.Services.IAuthenticationProviderConfiguration.AuthenticationProviderType">
            <summary>
            Defines the type of the IAuthenticationProvider to create
            </summary>
        </member>
        <member name="T:PnP.Core.Services.IAuthenticationProviderFactory">
            <summary>
            Public interface for the injectable service to create instances of the interface IAuthenticationProvider
            </summary>
        </member>
        <member name="M:PnP.Core.Services.IAuthenticationProviderFactory.Create(System.String)">
            <summary>
            Creates a new instance of IAuthenticationProvider based on a provided configuration name
            </summary>
            <param name="name">The name of the IAuthenticationProvider configuration to use</param>
            <returns>An object that implements IAuthenticationProvider based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IAuthenticationProviderFactory.CreateDefault">
            <summary>
            Creates the default instance of IAuthenticationProvider based on the configuration
            </summary>
            <returns>An object that implements IAuthenticationProvider based on the configuration</returns>
        </member>
        <member name="T:PnP.Core.Services.IOAuthAccessTokenProvider">
            <summary>
            OAuth access token provider
            </summary>
        </member>
        <member name="M:PnP.Core.Services.IOAuthAccessTokenProvider.GetAccessTokenAsync(System.Uri)">
            <summary>
            Returns an access token for a given resource
            </summary>
            <param name="resourceUri">Resource to return the access token for</param>
            <returns>Access token</returns>
        </member>
        <member name="T:PnP.Core.Services.OAuthAccessTokenConfiguration">
            <summary>
            Configuration for using an existing access token 
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthAccessTokenConfiguration.Name">
            <summary>
            The Name of the configuration
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthAccessTokenConfiguration.ClientId">
            <summary>
            The ClientId of the application to use for authentication, will always be null when we get an extenral access token
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthAccessTokenConfiguration.AuthenticationProviderType">
            <summary>
            Defines the type of the IAuthenticationProvider to create
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthAccessTokenConfiguration.AccessToken">
            <summary>
            The externally obtained access token to use
            </summary>
        </member>
        <member name="T:PnP.Core.Services.OAuthAuthenticationProvider">
            <summary>
            OAuth authentication provider, uses Azure AD to authenticate requests and provide access tokens
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthAuthenticationProvider.Configuration">
            <summary>
            Get's the in use <see cref="T:PnP.Core.Services.IAuthenticationProviderConfiguration"/>
            </summary>
        </member>
        <member name="M:PnP.Core.Services.OAuthAuthenticationProvider.#ctor(Microsoft.Extensions.Logging.ILogger{PnP.Core.Services.OAuthAuthenticationProvider},PnP.Core.Services.IOAuthAccessTokenProvider)">
            <summary>
            Default constructor
            </summary>
            <param name="logger">Logger</param>
        </member>
        <member name="M:PnP.Core.Services.OAuthAuthenticationProvider.Configure(PnP.Core.Services.IAuthenticationProviderConfiguration)">
            <summary>
            Configure this authentication provider for the desired configuration
            </summary>
            <param name="configuration"><see cref="T:PnP.Core.Services.IAuthenticationProviderConfiguration"/> (e.g. <see cref="T:PnP.Core.Services.OAuthCredentialManagerConfiguration"/>) to use</param>
        </member>
        <member name="M:PnP.Core.Services.OAuthAuthenticationProvider.AuthenticateRequestAsync(System.Uri,System.Net.Http.HttpRequestMessage)">
            <summary>
            Authenticate a given request by adding the needed authorization header
            </summary>
            <param name="resource">Resource to authenticate against</param>
            <param name="request"><see cref="T:System.Net.Http.HttpRequestMessage"/> to update with authentication details</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.OAuthAuthenticationProvider.GetAccessTokenAsync(System.Uri)">
            <summary>
            Get an access token for the requested resource 
            </summary>
            <param name="resource">Resource to request an access token for</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.OAuthAuthenticationProvider.GetAccessTokenAsync(System.Uri,System.String[])">
            <summary>
            Get an access token for the requested resource and scope(s)
            </summary>
            <param name="resource">Resource to request an access token for</param>
            <param name="scopes">Scope(s) to be used for the access token request</param>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.Services.OAuthAuthenticationProviderOptions">
            <summary>
            Defines a collection of credential settings for secure connections to the target resources
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthAuthenticationProviderOptions.DefaultConfiguration">
            <summary>
            Defines the name of the default configuration
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthAuthenticationProviderOptions.Configurations">
            <summary>
            Collection of credentials for OAuthAuthenticationProvider
            </summary>
        </member>
        <member name="T:PnP.Core.Services.OAuthCertificateConfiguration">
            <summary>
            Public type to define the Authentication based on X.509 Certificate
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthCertificateConfiguration.Certificate">
            <summary>
            The X.509 Certificate to use for authentication
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthCertificateConfiguration.Name">
            <summary>
            The Name of the configuration
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthCertificateConfiguration.ClientId">
            <summary>
            The ClientId of the application to use for authentication
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthCertificateConfiguration.AuthenticationProviderType">
            <summary>
            Defines the type of the IAuthenticationProvider to create
            </summary>
        </member>
        <member name="T:PnP.Core.Services.OAuthCredentialManagerConfiguration">
            <summary>
            Public type to define the Authentication based on Credential Manager
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthCredentialManagerConfiguration.Name">
            <summary>
            The Name of the configuration
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthCredentialManagerConfiguration.ClientId">
            <summary>
            The ClientId of the application to use for authentication
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthCredentialManagerConfiguration.AuthenticationProviderType">
            <summary>
            Defines the type of the IAuthenticationProvider to create
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthCredentialManagerConfiguration.CredentialManagerName">
            <summary>
            The name of the Windows Credential Manager settings to use
            </summary>
        </member>
        <member name="T:PnP.Core.Services.OAuthUsernamePasswordConfiguration">
            <summary>
            Public type to define the Authentication with Username and Password
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthUsernamePasswordConfiguration.Name">
            <summary>
            The Name of the configuration
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthUsernamePasswordConfiguration.ClientId">
            <summary>
            The ClientId of the application to use for authentication
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthUsernamePasswordConfiguration.AuthenticationProviderType">
            <summary>
            Defines the type of the IAuthenticationProvider to create
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthUsernamePasswordConfiguration.Username">
            <summary>
            The username for authenticating
            </summary>
        </member>
        <member name="P:PnP.Core.Services.OAuthUsernamePasswordConfiguration.Password">
            <summary>
            The password for authenticating
            </summary>
        </member>
        <member name="T:PnP.Core.Services.ApiCall">
            <summary>
            Struct that defines the API call to make
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCall.Type">
            <summary>
            Defines the type of API to call: SPO Rest or Microsoft Graph
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCall.Request">
            <summary>
            Defines the URL of the request
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCall.JsonBody">
            <summary>
            Defines the JSON body of the request, if any
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCall.XmlBody">
            <summary>
            Defines the XML body of the request, if any
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCall.ReceivingProperty">
            <summary>
            Typically the JSON response will be mapped to the current model object, but sometimes a call 
            will need to be mapped to a specific property in the current model. This for example is 
            done when a property requires it's own Graph Get request.
            
            Current this property is set automatically, no need to manually fiddle with it in API call overrides!
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCall.RawRequest">
            <summary>
            Is this a raw request that does not require automatic parsing of the returned json?
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCall.Commit">
            <summary>
            When set to true the current model item will be committed as changes are synced with the server
            </summary>
        </member>
        <member name="T:PnP.Core.Services.ApiCallRequest">
            <summary>
            Class that will be passed along during API overrides
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCallRequest.ApiCall">
            <summary>
            The actual API call to override
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCallRequest.Cancelled">
            <summary>
            Cancel this request, if for some reason the underlying API call cannot be made or makes no sense
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCallRequest.CancellationReason">
            <summary>
            Optional reason indicating why the request was cancelled
            </summary>
        </member>
        <member name="M:PnP.Core.Services.ApiCallRequest.CancelRequest">
            <summary>
            Cancel this request
            </summary>
        </member>
        <member name="M:PnP.Core.Services.ApiCallRequest.CancelRequest(System.String)">
            <summary>
            Cancel this request with a reason
            </summary>
            <param name="cancellationReason">Update cancellation reason</param>
        </member>
        <member name="P:PnP.Core.Services.ApiCallResponse.Json">
            <summary>
            Contains the json response of the request (if any)
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCallResponse.StatusCode">
            <summary>
            Contains the request http status code
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCallResponse.Headers">
            <summary>
            Contains additional response headers (if any)
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ApiCallResponse.CsomResponseJson">
            <summary>
            Contains CSOM response values
            </summary>
        </member>
        <member name="T:PnP.Core.Services.ApiHelper">
            <summary>
            Helper class to manage API calls URLs
            </summary>
        </member>
        <member name="T:PnP.Core.Services.ApiResponse">
            <summary>
            Defines the response of an executed API call
            </summary>
        </member>
        <member name="T:PnP.Core.Services.ApiType">
            <summary>
            Possible API's used to talk to data stores
            </summary>
        </member>
        <member name="F:PnP.Core.Services.ApiType.SPORest">
            <summary>
            Using the SharePoint REST API
            </summary>
        </member>
        <member name="F:PnP.Core.Services.ApiType.Graph">
            <summary>
            Using the production v1 Microsoft Graph REST API
            </summary>
        </member>
        <member name="F:PnP.Core.Services.ApiType.GraphBeta">
            <summary>
            Using the beta Microsoft Graph REST API
            </summary>
        </member>
        <member name="F:PnP.Core.Services.ApiType.CSOM">
            <summary>
            Using the SharePoint CSOM API
            </summary>
        </member>
        <member name="T:PnP.Core.Services.Batch">
            <summary>
            Defines a <see cref="T:PnP.Core.Services.Batch"/> of requests to execute
            </summary>
        </member>
        <member name="M:PnP.Core.Services.Batch.#ctor(System.Guid)">
            <summary>
            Instantiates a <see cref="T:PnP.Core.Services.Batch"/> for a given id
            </summary>
            <param name="id">Id of the batch</param>
        </member>
        <member name="M:PnP.Core.Services.Batch.#ctor">
            <summary>
            Default public constructor, instantiates a <see cref="T:PnP.Core.Services.Batch"/>
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Batch.Id">
            <summary>
            Id of the <see cref="T:PnP.Core.Services.Batch"/>
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Batch.Requests">
            <summary>
            List with requests 
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Batch.Executed">
            <summary>
            Was this <see cref="T:PnP.Core.Services.Batch"/> executed?
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Batch.UseGraphBatch">
            <summary>
            Only use Graph batching when all requests in the batch are targeting Graph
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Batch.UseCsomBatch">
            <summary>
            Only use Csom batching when all requests in the batch are targeting csom
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Batch.HasMixedApiTypes">
            <summary>
            Returns true if this <see cref="T:PnP.Core.Services.Batch"/> contains both SharePoint REST as Microsoft Graph requests
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Batch.CanFallBackToSPORest">
            <summary>
            Returns true if this <see cref="T:PnP.Core.Services.Batch"/> can be completely executed via SPO REST
            </summary>
        </member>
        <member name="M:PnP.Core.Services.Batch.Add(PnP.Core.Model.TransientObject,PnP.Core.Model.EntityInfo,System.Net.Http.HttpMethod,PnP.Core.Services.ApiCall,PnP.Core.Services.ApiCall,System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String})">
            <summary>
            Add a new request to this <see cref="T:PnP.Core.Services.Batch"/>
            </summary>
            <param name="model">Entity object on for which this request was meant</param>
            <param name="entityInfo">Info about the entity object</param>
            <param name="method">Type of http method (GET/PATCH/POST/...)</param>
            <param name="apiCall">Rest/Graph call</param>
            <param name="backupApiCall">Backup rest api call, will be used in case we encounter a mixed batch</param>
            <param name="fromJsonCasting">Delegate for json type parsing</param>
            <param name="postMappingJson">Delegate for post mapping</param>
            <returns>The id to created batch request</returns>
        </member>
        <member name="M:PnP.Core.Services.Batch.GetRequest(System.Int32)">
            <summary>
            Get's the request at a specific order
            </summary>
            <param name="order">Order to get the request for</param>
            <returns>The request at the given order</returns>
        </member>
        <member name="M:PnP.Core.Services.Batch.MakeSPORestOnlyBatch">
            <summary>
            Promotes a backup rest call to be the actual api call
            </summary>
        </member>
        <member name="M:PnP.Core.Services.Batch.GetLastRequest">
            <summary>
            Get's the last request in the list of requests
            </summary>
            <returns>The last request, null if there were no requests</returns>
        </member>
        <member name="T:PnP.Core.Services.BatchClient">
            <summary>
            Client that's reponsible for creating and processing batch requests
            </summary>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.#ctor(PnP.Core.Services.PnPContext,PnP.Core.Services.ISettings,Microsoft.ApplicationInsights.TelemetryClient)">
            <summary>
            Constructor
            </summary>
            <param name="context">PnP Context</param>
        </member>
        <member name="P:PnP.Core.Services.BatchClient.PnPContext">
            <summary>
            PnP Context
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchClient.MaxRequestsInGraphBatch">
            <summary>
            Max requests in a single Microsoft Graph batch
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchClient.HttpMicrosoftGraphMaxRetries">
            <summary>
            When not using retry-after, how many times can a retry be made. Defaults to 10
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchClient.HttpMicrosoftGraphDelayInSeconds">
            <summary>
            How many seconds to wait for the next retry attempt. Defaults to 3
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchClient.HttpMicrosoftGraphUseIncrementalDelay">
            <summary>
            Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchClient.MockingFileRewriteHandler">
            <summary>
            Handler that can be used to rewrite mocking files before they're used
            </summary>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.EnsureBatch">
            <summary>
            Creates a new batch
            </summary>
            <returns>Newly created batch</returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.EnsureBatch(System.Guid)">
            <summary>
            Gets or creates a new batch
            </summary>
            <param name="id">Id for the batch to get or create</param>
            <returns>Ensured batch</returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.ContainsBatch(System.Guid)">
            <summary>
            Checks if a given batch is still listed for this batch client
            </summary>
            <param name="id">Id of the batch to check for</param>
            <returns>True if still listed, false otherwise</returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.GetBatchById(System.Guid)">
            <summary>
            Gets a batch via the given id
            </summary>
            <param name="id">Id of the batch to get</param>
            <returns>The found batch, null otherwise</returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.ExecuteBatch(PnP.Core.Services.Batch)">
            <summary>
            Executes a given batch
            </summary>
            <param name="batch">Batch to execute</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.BuildSharePointRestBatchRequestContent(PnP.Core.Services.Batch)">
            <summary>
            Constructs the content of the batch request to be sent
            </summary>
            <param name="batch">Batch to create the request content for</param>
            <returns>StringBuilder holding the created batch request content</returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.ProcessSharePointRestBatchResponse(PnP.Core.Services.BatchClient.SPORestBatch,System.String)">
            <summary>
            Provides initial processing of a response for a SharePoint REST batch request
            </summary>
            <param name="restBatch">The batch request to process</param>
            <param name="batchResponse">The raw content of the response</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.ProcessSharePointRestBatchResponseContent(PnP.Core.Services.Batch,System.String)">
            <summary>
            Process the received batch response and connect the responses to the original requests in this batch
            </summary>
            <param name="batch">Batch that we're processing</param>
            <param name="batchResponse">Batch response received from the server</param>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.ExecuteCsomBatchAsync(PnP.Core.Services.Batch)">
            <summary>
            Execute a batch with CSOM requests.
            See https://docs.microsoft.com/en-us/openspecs/sharepoint_protocols/ms-csom/fd645da2-fa28-4daa-b3cd-8f4e506df117 for the CSOM protocol specs
            </summary>
            <param name="batch">Batch to execute</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.ProcessCsomBatchResponse(PnP.Core.Services.BatchClient.CsomBatch,System.String,System.Net.HttpStatusCode)">
            <summary>
            Provides initial processing of a response for a Csom batch request
            </summary>
            <param name="csomBatch">The batch request to process</param>
            <param name="batchResponse">The raw content of the response</param>
            <param name="statusCode">The Http status code of the request</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.SplitIntoBatchesPerApiType(PnP.Core.Services.Batch)">
            <summary>
            Splits a batch that contains rest and graph calls in two batches, one containing the rest calls, one containing the graph calls
            </summary>
            <param name="input">Batch to split</param>
            <returns>A rest batch and graph batch</returns>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.DedupBatchRequests(PnP.Core.Services.Batch@)">
            <summary>
            Deduplicates GET requests in a batch...if for some reason the same request for the same model instance is there twice then it will be removed
            </summary>
            <param name="batch">Batch to deduplicate</param>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.MergeBatchResultsWithModel(PnP.Core.Services.Batch)">
            <summary>
            Executing a batch might have resulted in a mismatch between the model and the data in SharePoint:
            Getting entities can result in duplicate entities (e.g. 2 lists when getting the same list twice in a single batch while using a different query)
            Adding entities can result in an entity in the model that does not have the proper key value set (as that value is only retrievable after the add in SharePoint)
            Deleting entities can result in an entity in the model that also should have been deleted
            </summary>
            <param name="batch">Batch to process</param>
        </member>
        <member name="M:PnP.Core.Services.BatchClient.RemoveProcessedBatches">
            <summary>
            Remove processed batches to avoid unneeded memory consumption
            </summary>
        </member>
        <member name="T:PnP.Core.Services.BatchRequest">
            <summary>
            Defines a request in a <see cref="T:PnP.Core.Services.Batch"/>
            </summary>
        </member>
        <member name="M:PnP.Core.Services.BatchRequest.#ctor(PnP.Core.Model.TransientObject,PnP.Core.Model.EntityInfo,System.Net.Http.HttpMethod,PnP.Core.Services.ApiCall,PnP.Core.Services.ApiCall,System.Func{PnP.Core.Services.FromJson,System.Object},System.Action{System.String},System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="modelInstance">Entity object on for which this request was meant</param>
            <param name="entityInfo">Info about the entity object</param>
            <param name="method">Type of http method (GET/PATCH/POST/...)</param>
            <param name="apiCall">Rest call to execute</param>
            <param name="backupApiCall">Backup rest api call, will be used in case we encounter a mixed batch</param>
            <param name="fromJsonCasting">Delegate for json type parsing</param>
            <param name="postMappingJson">Delegate for post mapping</param>
            <param name="order">Order of the request in the list of requests</param>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.Id">
            <summary>
            Id of the <see cref="T:PnP.Core.Services.BatchRequest"/>
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.Model">
            <summary>
            Entity object on for which this request was meant
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.EntityInfo">
            <summary>
            Info about the entity object
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.FromJsonCasting">
            <summary>
            Delegate for json type parsing
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.PostMappingJson">
            <summary>
            Delegate for post mapping 
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.Method">
            <summary>
            Type of http method (GET/PATCH/POST/...)
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.ApiCall">
            <summary>
            The rest call to execute
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.BackupApiCall">
            <summary>
            Backup rest api call, will be used in case we encounter a mixed <see cref="T:PnP.Core.Services.Batch"/>
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.Order">
            <summary>
            Order of the request in the list of requests
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.ResponseJson">
            <summary>
            Json response for this request (only populated when the <see cref="T:PnP.Core.Services.Batch"/> was executed)
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.CsomResponseJson">
            <summary>
            Dictionary with the json responses for the requests defined in the CSOM XML
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.ResponseHttpStatusCode">
            <summary>
            Http response code for this request (only populated when the <see cref="T:PnP.Core.Services.Batch"/> was executed)
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.ResponseHeaders">
            <summary>
            Headers returned for this request (e.g. Content header to follow-up on async server side operations)
            </summary>
        </member>
        <member name="P:PnP.Core.Services.BatchRequest.ExecutionNeeded">
            <summary>
            This batch request was not executed yet or a retry is needed
            </summary>
        </member>
        <member name="M:PnP.Core.Services.BatchRequest.AddResponse(System.String,System.Net.HttpStatusCode)">
            <summary>
            Records the response of a request (fired as part of the execution of a <see cref="T:PnP.Core.Services.Batch"/>)
            </summary>
            <param name="json">Json response for this request</param>
            <param name="responseHttpStatusCode">Http response status code for this request</param>
        </member>
        <member name="M:PnP.Core.Services.BatchRequest.AddResponse(System.String,System.Net.HttpStatusCode,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Records the response of a request (fired as part of the execution of a <see cref="T:PnP.Core.Services.Batch"/>)
            </summary>
            <param name="json">Json response for this request</param>
            <param name="responseHttpStatusCode">Http response status code for this request</param>
            <param name="responseHeaders">Http response headers</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PnP.Core.Services.BatchRequest.AddResponse(System.Collections.Generic.Dictionary{System.Int32,System.Text.Json.JsonElement},System.Net.HttpStatusCode)" -->
        <member name="M:PnP.Core.Services.BatchRequest.FlagForRetry(System.Net.HttpStatusCode,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This batch request needs to be retried
            </summary>
            <param name="responseHttpStatusCode">Http response status code for this request</param>
            <param name="responseHeaders">Http response headers</param>
        </member>
        <member name="T:PnP.Core.Services.FromJson">
            <summary>
            Class that represents the JSON context that's being used during call outs when parsing JSON responses
            </summary>
        </member>
        <member name="M:PnP.Core.Services.HttpRequestMessageExtensions.CloneAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a new HTTP request by copying previous HTTP request's headers and properties from response's request message.
            Copied from: https://github.com/microsoftgraph/msgraph-sdk-dotnet-core/blob/dev/src/Microsoft.Graph.Core/Extensions/HttpRequestMessageExtensions.cs
            </summary>
            <param name="originalRequest">The previous <see cref="T:System.Net.Http.HttpRequestMessage"/> needs to be copy.</param>
            <returns>The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</returns>
            <remarks>
            Re-issue a new HTTP request with the previous request's headers and properities
            </remarks>
        </member>
        <member name="T:PnP.Core.Services.MicrosoftGraphRetryHandler">
            <summary>
            Retry handler for Microsoft Graph requests
            </summary>
        </member>
        <member name="T:PnP.Core.Services.RetryHandlerBase">
            <summary>
            Retry handler for http requests
            Based upon: https://github.com/microsoftgraph/msgraph-sdk-dotnet-core/blob/dev/src/Microsoft.Graph.Core/Extensions/HttpRequestMessageExtensions.cs
            </summary>
        </member>
        <member name="M:PnP.Core.Services.RetryHandlerBase.SendRetryAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
            Retry sending the HTTP request 
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/> which is returned and includes the HTTP request needs to be retried.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the retry.</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.RetryHandlerBase.AddOrUpdateRetryAttempt(System.Net.Http.HttpRequestMessage,System.Int32)">
            <summary>
            Update Retry-Attempt header in the HTTP request
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>needs to be sent.</param>
            <param name="retryCount">Retry times</param>
        </member>
        <member name="T:PnP.Core.Services.SharePointRestRetryHandler">
            <summary>
            Retry handler for SharePoint REST requests
            </summary>
        </member>
        <member name="T:PnP.Core.Services.IPnPContextFactory">
            <summary>
            Public interface for the injectable service to create an PnPContext
            </summary>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.Create(System.Uri,System.String)">
            <summary>
            Creates a new instance of PnPContext based on a provided URL and Authentication configuration name
            </summary>
            <param name="url">The URL of the PnPContext as a URI</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.CreateAsync(System.Uri,System.String)">
            <summary>
            Creates a new instance of PnPContext based on a provided URL and Authentication configuration name
            </summary>
            <param name="url">The URL of the PnPContext as a URI</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.Create(System.Uri,PnP.Core.Services.IAuthenticationProvider)">
            <summary>
            Creates a new instance of PnPContext based on a provided URL and Authentication Provider instance
            </summary>
            <param name="url">The URL of the PnPContext as a URI</param>
            <param name="authenticationProvider">The Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.CreateAsync(System.Uri,PnP.Core.Services.IAuthenticationProvider)">
            <summary>
            Creates a new instance of PnPContext based on a provided URL and Authentication Provider instance
            </summary>
            <param name="url">The URL of the PnPContext as a URI</param>
            <param name="authenticationProvider">The Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.Create(System.Uri)">
            <summary>
            Creates a new instance of PnPContext based on a provided URL and using the default Authentication Provider
            </summary>
            <param name="url">The URL of the PnPContext as a URI</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.CreateAsync(System.Uri)">
            <summary>
            Creates a new instance of PnPContext based on a provided URL and using the default Authentication Provider
            </summary>
            <param name="url">The URL of the PnPContext as a URI</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.Create(System.Guid,System.String)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and Authentication configuration name
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.CreateAsync(System.Guid,System.String)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and Authentication configuration name
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.Create(System.Guid,PnP.Core.Services.IAuthenticationProvider)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and Authentication Provider instance
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <param name="authenticationProvider">The Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.CreateAsync(System.Guid,PnP.Core.Services.IAuthenticationProvider)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and Authentication Provider instance
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <param name="authenticationProvider">The Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.Create(System.Guid)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.CreateAsync(System.Guid)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.Create(System.String)">
            <summary>
            Creates a new instance of PnPContext based on a provided configuration name
            </summary>
            <param name="url">The name of the configuration to use</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.IPnPContextFactory.CreateAsync(System.String)">
            <summary>
            Creates a new instance of PnPContext based on a provided configuration name
            </summary>
            <param name="url">The name of the configuration to use</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="T:PnP.Core.Services.ISettings">
            <summary>
            PnP Core SDK settings
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.DisableTelemetry">
            <summary>
            Turns on/off telemetry, can be customized via configuration. Defaults to false.
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.GraphFirst">
            <summary>
            Turns on/off the Microsoft Graph first behavior, can be customized via configuration. Defaults to true.
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.GraphAlwaysUseBeta">
            <summary>
            Always uses the Microsoft Graph Beta api's, can be customized via configuration. Defaults to false.
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.GraphCanUseBeta">
            <summary>
            Turns on/off the option to use Microsoft Graph Beta api's, can be customized via configuration 
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.HttpUserAgent">
            <summary>
            User agent value, can be customized via configuration 
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.HttpSharePointRestUseRetryAfterHeader">
            <summary>
            Use the Retry-After header for calculating the delay in case of a retry. Defaults to false
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.HttpSharePointRestMaxRetries">
            <summary>
            When not using retry-after, how many times can a retry be made. Defaults to 10
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.HttpSharePointRestDelayInSeconds">
            <summary>
            How many seconds to wait for the next retry attempt. Defaults to 3
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.HttpSharePointRestUseIncrementalDelay">
            <summary>
            Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.HttpMicrosoftGraphUseRetryAfterHeader">
            <summary>
            Use the Retry-After header for calculating the delay in case of a retry. Defaults to true
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.HttpMicrosoftGraphMaxRetries">
            <summary>
            When not using retry-after, how many times can a retry be made. Defaults to 10
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.HttpMicrosoftGraphDelayInSeconds">
            <summary>
            How many seconds to wait for the next retry attempt. Defaults to 3
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.HttpMicrosoftGraphUseIncrementalDelay">
            <summary>
            Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.VersionTag">
            <summary>
            Version tag used in telemetry
            </summary>
        </member>
        <member name="P:PnP.Core.Services.ISettings.AADTenantId">
            <summary>
            AAD tenant id, used for telemetry purposes. Can be customized via configuration
            </summary>
        </member>
        <member name="T:PnP.Core.Services.JsonMappingHelper">
            <summary>
            Internal class to help with the JSON mapping for Domain Model objects
            </summary>
        </member>
        <member name="M:PnP.Core.Services.JsonMappingHelper.MapJsonToModel(PnP.Core.Services.BatchRequest)">
            <summary>
            Maps a json string to the provided domain model object instance
            </summary>
            <param name="model">The Domain Model object to map json to</param>
            <param name="batchRequest">The batch request to map json from</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.JsonMappingHelper.FromJson(PnP.Core.Model.TransientObject,PnP.Core.Model.EntityInfo,PnP.Core.Services.ApiResponse,System.Func{PnP.Core.Services.FromJson,System.Object})">
            <summary>
            Maps JSON to model classes
            </summary>
            <param name="pnpObject">Model to populate from JSON</param>
            <param name="entity">Information about the current model</param>
            <param name="apiResponse">The REST response to process</param>
            <param name="fromJsonCasting">Delegate to be called for type conversion</param>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.JsonMappingHelper.FromJsonGraph(PnP.Core.Model.TransientObject,PnP.Core.Model.EntityInfo,PnP.Core.Services.ApiResponse,System.Func{PnP.Core.Services.FromJson,System.Object})">
            <summary>
            Maps JSON to model classes
            </summary>
            <param name="pnpObject">Model to populate from JSON</param>
            <param name="entity">Information about the current model</param>
            <param name="root">JsonElement to process</param>
            <param name="fromJsonCasting">Delegate to be called for type conversion</param>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.Services.MicrosoftGraphClient">
            <summary>
            Client that handles all Microsoft Graph requests
            </summary>
        </member>
        <member name="T:PnP.Core.Services.PnPContext">
            <summary>
            PnP Context class...the glue between the model and the data stores
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.Uri">
            <summary>
            Uri of the SharePoint site we're working against
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.Logger">
            <summary>
            Connected logger
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.AuthenticationProvider">
            <summary>
            Connected authentication provider
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.RestClient">
            <summary>
            Connected SharePoint REST client
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.GraphClient">
            <summary>
            Connected Microsoft Graph client
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.BatchClient">
            <summary>
            Connected batch client
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.Id">
            <summary>
            Unique id for this <see cref="T:PnP.Core.Services.PnPContext"/>
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.Mode">
            <summary>
            Mode this context operates in
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.TestId">
            <summary>
            Id associated to this context in a test case
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.TestName">
            <summary>
            Name of the test case using this context
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.TestFilePath">
            <summary>
            Path of the test case
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.GenerateTestMockingDebugFiles">
            <summary>
            Generate the .request and .debug files, can be handy for debugging
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.TestUris">
            <summary>
            Urls's used by the test cases
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.GraphFirst">
            <summary>
            Controls whether the library will try to use Microsoft Graph over REST whenever that's defined in the model
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.GraphAlwaysUseBeta">
            <summary>
            If true than all requests to Microsoft Graph use the beta endpoint
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.GraphCanUseBeta">
            <summary>
            If true than the Graph beta endpoint is used when there's no other option, default approach stays using the v1 endpoint
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.CurrentBatch">
            <summary>
            Current batch, used for implicit batching
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.HasPendingRequests">
            <summary>
            Are there pending requests to execute (in the case of batching)
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.Web">
            <summary>
            Entry point for the Web Object
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.Site">
            <summary>
            Entry point for the Site Object
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.Team">
            <summary>
            Entry point for the Team Object
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContext.Group">
            <summary>
            Entry point for the Microsoft 365 Group Object
            </summary>
        </member>
        <member name="M:PnP.Core.Services.PnPContext.NewBatch">
            <summary>
            Creates a new batch
            </summary>
            <returns></returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContext.ExecuteAsync">
            <summary>
            Method to execute the current batch
            </summary>
            <returns>The asynchronous task that will be executed</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContext.ExecuteAsync(PnP.Core.Services.Batch)">
            <summary>
            Method to execute a given batch
            </summary>
            <param name="batch">Batch to execute</param>
            <returns>The asynchronous task that will be executed</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContext.SetAccessToken(System.String)">
            <summary>
            Sets an access token to be used for this context. Only works when the current configuration is using the <see cref="T:PnP.Core.Services.OAuthAccessTokenConfiguration"/>
            </summary>
            <param name="accessToken">Access token to set</param>
        </member>
        <member name="M:PnP.Core.Services.PnPContext.Clone">
            <summary>
            Clones this context into a new context for the same SharePoint site
            </summary>
            <returns>New <see cref="T:PnP.Core.Services.PnPContext"/></returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContext.Clone(System.Uri)">
            <summary>
            Clones this context for another SharePoint site
            </summary>
            <param name="uri">Uri of the other SharePoint site</param>
            <returns>New <see cref="T:PnP.Core.Services.PnPContext"/></returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContext.SetAADTenantId">
            <summary>
            Gets the Azure Active Directory tenant id. Using the client.svc endpoint approach as that one will also work with vanity SharePoint domains
            </summary>
        </member>
        <member name="M:PnP.Core.Services.PnPContext.IsSubSite(System.Uri)">
            <summary>
            Simple is sub site check based upon the url pattern
            </summary>
            <param name="site">Uri to check</param>
            <returns>True if sub site, false otherwise</returns>
        </member>
        <member name="T:PnP.Core.Services.PnPContextFactory">
            <summary>
            Public factory service to create PnPContext object instances
            </summary>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.Create(System.String)">
            <summary>
            Creates a new instance of SPOContext based on a provided configuration name
            </summary>
            <param name="name">The name of the SPOContext configuration to use</param>
            <returns>A SPOContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.CreateAsync(System.String)">
            <summary>
            Creates a new instance of SPOContext based on a provided configuration name
            </summary>
            <param name="name">The name of the SPOContext configuration to use</param>
            <returns>A SPOContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.Create(System.Uri)">
            <summary>
            Creates a new instance of SPOContext based on a provided configuration name
            </summary>
            <param name="url">The URL of the SPOContext as a URI</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the SPOContext</param>
            <returns>A SPOContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.CreateAsync(System.Uri)">
            <summary>
            Creates a new instance of SPOContext based on a provided configuration name
            </summary>
            <param name="url">The URL of the SPOContext as a URI</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the SPOContext</param>
            <returns>A SPOContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.Create(System.Uri,System.String)">
            <summary>
            Creates a new instance of SPOContext based on a provided configuration name
            </summary>
            <param name="url">The URL of the SPOContext as a URI</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the SPOContext</param>
            <returns>A SPOContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.CreateAsync(System.Uri,System.String)">
            <summary>
            Creates a new instance of SPOContext based on a provided configuration name
            </summary>
            <param name="url">The URL of the SPOContext as a URI</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the SPOContext</param>
            <returns>A SPOContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.Create(System.Uri,PnP.Core.Services.IAuthenticationProvider)">
            <summary>
            Creates a new instance of SPOContext based on a provided configuration name
            </summary>
            <param name="url">The URL of the SPOContext as a URI</param>
            <param name="authenticationProvider">The Authentication Provider to use to authenticate within the SPOContext</param>
            <returns>A SPOContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.CreateAsync(System.Uri,PnP.Core.Services.IAuthenticationProvider)">
            <summary>
            Creates a new instance of SPOContext based on a provided configuration name
            </summary>
            <param name="url">The URL of the SPOContext as a URI</param>
            <param name="authenticationProvider">The Authentication Provider to use to authenticate within the SPOContext</param>
            <returns>A SPOContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.Create(System.Guid,System.String)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and Authentication configuration name
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.CreateAsync(System.Guid,System.String)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and Authentication configuration name
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <param name="authenticationProviderName">The name of the Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.Create(System.Guid,PnP.Core.Services.IAuthenticationProvider)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and Authentication Provider instance
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <param name="authenticationProvider">The Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.CreateAsync(System.Guid,PnP.Core.Services.IAuthenticationProvider)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and Authentication Provider instance
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <param name="authenticationProvider">The Authentication Provider to use to authenticate within the PnPContext</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.Create(System.Guid)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="M:PnP.Core.Services.PnPContextFactory.CreateAsync(System.Guid)">
            <summary>
            Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider
            </summary>
            <param name="groupId">The id of an Microsoft 365 group</param>
            <returns>A PnPContext object based on the provided configuration name</returns>
        </member>
        <member name="T:PnP.Core.Services.PnPContextFactoryCollectionExtensions">
            <summary>
            Extension class for the IServiceCollection type to provide supporting methods for the PnPContextFactory service
            </summary>
        </member>
        <member name="T:PnP.Core.Services.PnPContextFactoryOptions">
            <summary>
            Defines the options to configure the PnPContextFactory object
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContextFactoryOptions.Configurations">
            <summary>
            Collection of configurations for PnPContextFactory
            </summary>
        </member>
        <member name="T:PnP.Core.Services.PnPContextFactoryOptionsConfiguration">
            <summary>
            PnPContext configuration options
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContextFactoryOptionsConfiguration.Name">
            <summary>
            The Name of the configuration
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContextFactoryOptionsConfiguration.SiteUrl">
            <summary>
            The URL of the target SPO Site
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PnPContextFactoryOptionsConfiguration.AuthenticationProviderName">
            <summary>
            The Name of the Authentication Provider configuration
            </summary>
        </member>
        <member name="T:PnP.Core.Services.PropertyUpdateRequest">
            <summary>
            Class used to provide information on a field update request
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PropertyUpdateRequest.PropertyName">
            <summary>
            Information about the property being updated
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PropertyUpdateRequest.Value">
            <summary>
            Value being set to the property
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PropertyUpdateRequest.Cancelled">
            <summary>
            Cancel this update, if for some reason the property update should not continue
            </summary>
        </member>
        <member name="P:PnP.Core.Services.PropertyUpdateRequest.CancellationReason">
            <summary>
            Optional reason indicating why the update was cancelled
            </summary>
        </member>
        <member name="M:PnP.Core.Services.PropertyUpdateRequest.CancelUpdate">
            <summary>
            Cancel this update
            </summary>
        </member>
        <member name="M:PnP.Core.Services.PropertyUpdateRequest.CancelUpdate(System.String)">
            <summary>
            Cancel this update with a reason
            </summary>
            <param name="cancellationReason">Update cancellation reason</param>
        </member>
        <member name="T:PnP.Core.Services.Settings">
            <summary>
            PnP Core SDK settings class
            </summary>
        </member>
        <member name="M:PnP.Core.Services.Settings.#ctor(Microsoft.Extensions.Logging.ILogger{PnP.Core.Services.Settings},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Default constructor
            </summary>
            <param name="log">Connected logger</param>
            <param name="configuration">Configuration that was loaded</param>
        </member>
        <member name="P:PnP.Core.Services.Settings.DisableTelemetry">
            <summary>
            Turns on/off telemetry, can be customized via configuration. Defaults to false.
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.HttpUserAgent">
            <summary>
            User agent value, can be customized via configuration 
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.HttpSharePointRestUseRetryAfterHeader">
            <summary>
            Use the Retry-After header for calculating the delay in case of a retry. Defaults to false
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.HttpSharePointRestMaxRetries">
            <summary>
            When not using retry-after, how many times can a retry be made. Defaults to 10
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.HttpSharePointRestDelayInSeconds">
            <summary>
            How many seconds to wait for the next retry attempt. Defaults to 3
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.HttpSharePointRestUseIncrementalDelay">
            <summary>
            Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.HttpMicrosoftGraphUseRetryAfterHeader">
            <summary>
            Use the Retry-After header for calculating the delay in case of a retry. Defaults to true
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.HttpMicrosoftGraphMaxRetries">
            <summary>
            When not using retry-after, how many times can a retry be made. Defaults to 10
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.HttpMicrosoftGraphDelayInSeconds">
            <summary>
            How many seconds to wait for the next retry attempt. Defaults to 3
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.HttpMicrosoftGraphUseIncrementalDelay">
            <summary>
            Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.GraphFirst">
            <summary>
            Turns on/off the Microsoft Graph first behavior, can be customized via configuration. Defaults to true.
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.GraphAlwaysUseBeta">
            <summary>
            Always uses the Microsoft Graph Beta api's, can be customized via configuration. Defaults to false.
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.GraphCanUseBeta">
            <summary>
            Turns on/off the option to use Microsoft Graph Beta api's, can be customized via configuration 
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.VersionTag">
            <summary>
            Version tag used in telemetry
            </summary>
        </member>
        <member name="P:PnP.Core.Services.Settings.AADTenantId">
            <summary>
            AAD tenant id, used for telemetry purposes. Can be customized via configuration
            </summary>
        </member>
        <member name="T:PnP.Core.Services.SettingsCollectionExtensions">
            <summary>
            Add <see cref="T:PnP.Core.Services.ISettings"/> to the dependency injection container
            </summary>
        </member>
        <member name="M:PnP.Core.Services.SettingsCollectionExtensions.AddSettings(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">Dependency injection container to add the <see cref="T:PnP.Core.Services.ISettings"/> to</param>
            <returns></returns>
        </member>
        <member name="T:PnP.Core.Services.SharePointRestClient">
            <summary>
            Client that handles all SharePoint REST requests
            </summary>
        </member>
        <member name="P:PnP.Core.Services.SharePointRestClient.Client">
            <summary>
            Http client which needs to be used for making a SharePoint REST call
            </summary>
        </member>
        <member name="M:PnP.Core.Services.SharePointRestClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger{PnP.Core.Services.SharePointRestClient},PnP.Core.Services.ISettings)">
            <summary>
            Default Constructor
            </summary>
            <param name="client">Http Client coming from the .Net http client factory</param>
            <param name="log">Logger service</param>
            <param name="settingsClient">Settings service</param>
        </member>
        <member name="P:PnP.Core.Services.TelemetryManager.TelemetryClient">
            <summary>
            Azure AppInsights Telemetry client
            </summary>
        </member>
        <member name="P:PnP.Core.Services.TelemetryManager.SettingsClient">
            <summary>
            Settings client
            </summary>
        </member>
        <member name="P:PnP.Core.Services.TelemetryManager.Version">
            <summary>
            File version of the PnP Core SDK
            </summary>
        </member>
        <member name="T:PnP.Core.Services.TestManager">
            <summary>
            Test manager class, responsible for recording and mocking test data
            </summary>
        </member>
        <member name="M:PnP.Core.Services.TestManager.RecordRequest(PnP.Core.Services.PnPContext,System.String,System.String)">
            <summary>
            Record a the request for a future mock use
            </summary>
            <param name="context">Current PnPContext</param>
            <param name="requestKey">Key we used to calculate the hash used to identify this request</param>
            <param name="request">Actual request that's being sent to the server</param>
        </member>
        <member name="M:PnP.Core.Services.TestManager.RecordResponse(PnP.Core.Services.PnPContext,System.String,System.String)">
            <summary>
            Record the response of a request
            </summary>
            <param name="context">Current PnPContext</param>
            <param name="requestKey">Key we used to calculate the hash used to identify this request</param>
            <param name="response">Response that came back from the server</param>
        </member>
        <member name="M:PnP.Core.Services.TestManager.IsMockAvailable(PnP.Core.Services.PnPContext,System.String)">
            <summary>
            Verifies if mock data is already available for the current request
            </summary>
            <param name="context">Current PnPContext</param>
            <param name="requestKey">Key we used to calculate the hash, used to identify the response to return</param>
            <returns>Returns true if the response from the mock is available</returns>
        </member>
        <member name="M:PnP.Core.Services.TestManager.MockResponse(PnP.Core.Services.PnPContext,System.String)">
            <summary>
            Mocks the response for a given request
            </summary>
            <param name="context">Current PnPContext</param>
            <param name="requestKey">Key we used to calculate the hash, used to identify the response to return</param>
            <returns>Server response from the mock response</returns>
        </member>
        <member name="M:PnP.Core.Services.TestManager.SaveProperties(PnP.Core.Services.PnPContext,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Saves test properties that need to be persisted to enable offline testing to a file
            </summary>
            <param name="context">Current PnPContext</param>
            <param name="properties">Dictionary of properties to save</param>
        </member>
        <member name="M:PnP.Core.Services.TestManager.GetProperties(PnP.Core.Services.PnPContext)">
            <summary>
            Loads persisted test properties into a dictionary
            </summary>
            <param name="context">Current PnPContext</param>
            <returns>Dictionary of properties</returns>
        </member>
        <member name="M:PnP.Core.Services.TestManager.DeleteProperties(PnP.Core.Services.PnPContext)">
            <summary>
            Deletes the persisted properties
            </summary>
            <param name="context">Current PnPContext</param>
        </member>
        <member name="M:PnP.Core.Services.TestManager.IsMicrosoftGraphMockData(System.String)">
            <summary>
            Checks if the presented mock data is Microsoft Graph mock data
            </summary>
            <param name="mockData">Mock data to inspect</param>
            <returns>True if Microsoft Graph, false otherwise</returns>
        </member>
        <member name="T:PnP.Core.Services.TestMode">
            <summary>
            Mode in which we operate
            </summary>
        </member>
        <member name="F:PnP.Core.Services.TestMode.Default">
            <summary>
            We're not running in a test modus
            </summary>
        </member>
        <member name="F:PnP.Core.Services.TestMode.Record">
            <summary>
            We're in test modus and want to record server responses
            </summary>
        </member>
        <member name="F:PnP.Core.Services.TestMode.Mock">
            <summary>
            We're in test modus and want to playback server responses
            </summary>
        </member>
        <member name="T:PnP.Core.Services.TokenHandler">
            <summary>
            Handler class to help managing tokens replacement
            </summary>
        </member>
        <member name="M:PnP.Core.Services.TokenHandler.ResolveTokensAsync(PnP.Core.Model.IMetadataExtensible,System.String,PnP.Core.Services.PnPContext)">
            <summary>
            Method to resolve a set of tokens in a provided tokenized string
            </summary>
            <param name="tokenizedValue">A string with tokens</param>
            <param name="pnpObject">The domain model object to use as the target reference</param>
            <returns>The string with tokens resolved</returns>
        </member>
        <member name="T:PnP.Core.Utilities.ExpandoObjectExtensions">
            <summary>
            Extension type for the ExpandObject type
            </summary>
        </member>
        <member name="M:PnP.Core.Utilities.ExpandoObjectExtensions.MergeWith(System.Dynamic.ExpandoObject,System.Dynamic.ExpandoObject[])">
            <summary>
            Merge several expando objects together
            The same properties are overridden with the value of the last specified expando
            </summary>
            <param name="expando">The initial expando</param>
            <param name="others">All the expando to merge</param>
            <returns>A new expando instance resulting from the merge of all specified expandos</returns>
        </member>
        <member name="M:PnP.Core.Utilities.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)">
            <summary>
            Retrieves the value of a public, instance property 
            </summary>
            <param name="source">The source object</param>
            <param name="propertyName">The property name, case insensitive</param>
            <returns>The property value, if any</returns>
        </member>
        <member name="M:PnP.Core.Utilities.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)">
            <summary>
            Retrieves a public, instance property 
            </summary>
            <param name="source">The source object</param>
            <param name="propertyName">The property name, case insensitive</param>
            <returns>The property, if any</returns>
        </member>
        <member name="M:PnP.Core.Utilities.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a public, instance property 
            </summary>
            <param name="source">The source object</param>
            <param name="propertyName">The property name, case insensitive</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:PnP.Core.Utilities.ObjectExtensions.AreMappingCompatible(System.Type,System.Type)">
            <summary>
            Indicates whether 2 types are compatible for mapping
            </summary>
            <param name="sourceType">The type of the property to map the value from</param>
            <param name="targetType">The type of the property to map the value to</param>
            <returns><c>true</c> if the types are compatible, <c>false</c> otherwise</returns>
        </member>
        <member name="T:PnP.Core.SecurityExtensions">
            <summary>
            Extensions class that support certificate based encryption/decryption and SecureString protection
            </summary>
        </member>
        <member name="M:PnP.Core.SecurityExtensions.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a piece of text based on a given certificate
            </summary>
            <param name="stringToEncrypt">Text to encrypt</param>
            <param name="thumbPrint">Thumbprint of the certificate to use</param>
            <returns>Encrypted text</returns>
        </member>
        <member name="M:PnP.Core.SecurityExtensions.Decrypt(System.String,System.String)">
            <summary>
            Decrypt a piece of text based on a given certificate
            </summary>
            <param name="stringToDecrypt">Text to decrypt</param>
            <param name="thumbPrint">Thumbprint of the certificate to use</param>
            <returns>Decrypted text</returns>
        </member>
        <member name="M:PnP.Core.SecurityExtensions.ToSecureString(System.String)">
            <summary>
            Converts a string to a SecureString
            </summary>
            <param name="input">String to convert</param>
            <returns>SecureString representation of the passed in string</returns>
        </member>
        <member name="M:PnP.Core.SecurityExtensions.ToInsecureString(System.Security.SecureString)">
            <summary>
            Converts a SecureString to a "regular" string
            </summary>
            <param name="input">SecureString to convert</param>
            <returns>A "regular" string representation of the passed SecureString</returns>
        </member>
        <member name="T:PnP.Core.X509CertificateUtility">
            <summary>
            Supporting class for certificate based operations
            </summary>
        </member>
        <member name="M:PnP.Core.X509CertificateUtility.LoadCertificate(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Loads a certificate from a given certificate store
            </summary>
            <param name="storeName">Name of the certificate store</param>
            <param name="storeLocation">Location of the certificate store</param>
            <param name="thumbprint">Thumbprint of the certificate to load</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> certificate</returns>
        </member>
        <member name="M:PnP.Core.X509CertificateUtility.Encrypt(System.Byte[],System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Encrypts data based on the RSACryptoServiceProvider
            </summary>
            <param name="plainData">Bytes to encrypt</param>
            <param name="fOAEP"> true to perform direct System.Security.Cryptography.RSA decryption using OAEP padding</param>
            <param name="certificate">Certificate to use</param>
            <returns>Encrypted bytes</returns>
        </member>
        <member name="M:PnP.Core.X509CertificateUtility.Decrypt(System.Byte[],System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypts data based on the RSACryptoServiceProvider
            </summary>
            <param name="encryptedData">Bytes to decrypt</param>
            <param name="fOAEP"> true to perform direct System.Security.Cryptography.RSA decryption using OAEP padding</param>
            <param name="certificate">Certificate to use</param>
            <returns>Decrypted bytes</returns>
        </member>
        <member name="M:PnP.Core.X509CertificateUtility.GetPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Returns the certificate public key
            </summary>
            <param name="certificate">Certificate to operate on</param>
            <returns>Public key of the certificate</returns>
        </member>
    </members>
</doc>
